<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>not 1 bit</title>
    <description>Some stuff</description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 05 Apr 2015 23:56:09 +0100</pubDate>
    <lastBuildDate>Sun, 05 Apr 2015 23:56:09 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Page Layout using Directives, Transclusion, and Multi-Transclusion</title>
        <description>
</description>
        <pubDate>Sat, 04 Apr 2015 00:00:00 +0100</pubDate>
        <link>/2015/04/04/angular3/</link>
        <guid isPermaLink="true">/2015/04/04/angular3/</guid>
        
        <category>DDD</category>
        
        <category>JPA</category>
        
        
      </item>
    
      <item>
        <title>Creating a reusable, testable component with directives using Angular 1.3</title>
        <description>&lt;p&gt;I’ll start by focusing on creating and testing a re-usable ‘month picker’ component.&lt;/p&gt;

&lt;h3 id=&quot;the-new-html-element-we-are-creating&quot;&gt;The new HTML element we are creating&lt;/h3&gt;

&lt;p&gt;Lets turn our attention to the end product. In order to know when we have finished developing it, we need some requirements. These will be a great help when it comes to testing. Since we will be testing with Jasmine, lets save ourselves some work and put the requirements into a Jasmine-style BDD format:&lt;/p&gt;

&lt;pre&gt;
  Given a MonthPicker directive
    when in default mode
      ✓ should be properly set up
      ✓ should have a months object with the 12 months
      ✓ should create 12 buttons
      ✓ should have labels on the buttons corresponding to the months
      ✓ should mark a single button clicked as active
      ✓ should return single month corresponding to selected button
    when in multi mode
      ✓ should mark all buttons clicked as active
      ✓ should toggle active buttons to inactive
      ✓ should return months corresponding to selected buttons

&lt;/pre&gt;

&lt;p&gt;Here is a sneek preview of the finished component operating in single-select mode:&lt;/p&gt;

&lt;script src=&quot;/angular/js/angular.js&quot;&gt;&lt;/script&gt;

&lt;div ng-app=&quot;monthPickerModule&quot; class=&quot;demo&quot;&gt;

    &lt;month-picker multi=&quot;false&quot; month-selected-expression=&quot;value1 = month&quot;&gt;
    &lt;/month-picker&gt;
    &lt;h4&gt;Selected:{[{value1}]}&lt;/h4&gt;

	&lt;p&gt;And here it is in multi-select mode:&lt;/p&gt;
    
    &lt;month-picker multi=&quot;true&quot; month-selected-expression=&quot;value2 = month&quot;&gt;
    &lt;/month-picker&gt;
    &lt;h4&gt;Selected:{[{value2}]}&lt;/h4&gt;
    &lt;script src=&quot;/angular/monthPicker.js&quot;&gt;&lt;/script&gt;
&lt;/div&gt;

&lt;p&gt;We want to make including this component on a page as simple as possible for the ‘end-user’ (someone developing the site, perhaps ourselves). At a minimum we will need to inclue in this new element a way of specifying single-select or multi-select mode, and some way of getting the seleced month(s) into the scope of the controller of the rendered page.&lt;/p&gt;

&lt;p&gt;Here is how we do it:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;month-picker&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; 	 &lt;span class=&quot;na&quot;&gt;multi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;na&quot;&gt;month-selected-expression=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;someFunction(months)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/month-picker&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For this to work the value for &lt;code&gt;multi&lt;/code&gt; needs to get passed to our directive, so it can change the components opperation accordingly. And whatever is in &lt;code&gt;month-selected-expression&lt;/code&gt; should be evaluated whenever a month is selected, in this case calling &lt;code&gt;someMethod&lt;/code&gt; in the scope of the page on which it resides, passing in the month that was clicked.&lt;/p&gt;

&lt;p&gt;The secret of this working is related to directive scope.&lt;/p&gt;

&lt;h3 id=&quot;a-note-on-directive-scope&quot;&gt;A note on directive scope&lt;/h3&gt;
&lt;p&gt;Its worth understanding the relationship this &lt;code&gt;&amp;lt;month-picker&amp;gt;&lt;/code&gt; tag has with its directive. &lt;/p&gt;

&lt;p&gt;By default a directive shares its parent scope, so has access to the scope of the page it is included on. We could use this for any communication between our directive and the page without any further work. For example, we could have the directive call a method in the page controller. While this approach is convenient it is not a very encapsulated solution, and makes &lt;code&gt;&amp;lt;month-picker&amp;gt;&lt;/code&gt; less re-usable.&lt;/p&gt;

&lt;p&gt;A better solution is to give the directive its own scope – referred to as ‘isolate scope’ – and pass values to and from it using attributes on the &lt;code&gt;&amp;lt;month-picker&amp;gt;&lt;/code&gt; tag. This way the component is isolated from other scopes, and we have a clear method of communication between it and the page on which it appears.&lt;/p&gt;

&lt;p&gt;Configuration isolate scope in directives is done using an empty scope object (&lt;code&gt;{}&lt;/code&gt;). We can specify we want the &lt;code&gt;month-selected-expression&lt;/code&gt; and &lt;code&gt;multi&lt;/code&gt; attributes to be shared between the directive and the page by including their &lt;a href=&quot;http://en.wikipedia.org/wiki/CamelCase&quot;&gt;camel case&lt;/a&gt; equivalent as properties within this empty scope object:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;nx&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;@?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;nx&quot;&gt;monthSelectedExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The value passed to these two properties represents the relationship:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code&gt;@&lt;/code&gt; means a value is passed from the parent scope into the isolate directive scope&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;=&lt;/code&gt; is for 2-way binding between the isolate scope of the directive and the parent scope&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt; is for when a value is pushed back from the directives isolate scope to its parent scope&lt;/li&gt;
  &lt;li&gt;&lt;code&gt;?&lt;/code&gt; indicates that a binding is optional&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So in our example:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;month-picker&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; 	 &lt;span class=&quot;na&quot;&gt;multi=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;true&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     &lt;span class=&quot;na&quot;&gt;month-selected-expression=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;someFunction(months)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/month-picker&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The month-picker component is set to multi-select mode, and whenever a month is selected, the function &lt;code&gt;someFunction&lt;/code&gt; is called passing in an object representing the clicked month.&lt;/p&gt;

&lt;p&gt;Having outlined our requirements and considered the intricacies of directive scope, lets look at the directive code.&lt;/p&gt;

&lt;h3 id=&quot;writing-the-directive&quot;&gt;Writing the directive&lt;/h3&gt;

&lt;p&gt;To write this directive we will need:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;a template containing the HTML&lt;/li&gt;
  &lt;li&gt;a controller function to feed the template&lt;/li&gt;
  &lt;li&gt;a directive function to configure the component&lt;/li&gt;
  &lt;li&gt;a module to keep it all in&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;a-template-containing-the-html&quot;&gt;1. A template containing the HTML&lt;/h3&gt;
&lt;p&gt;Nothing special about the components HTML template. It only knows about its controller, represented here by &lt;code&gt;ctrl&lt;/code&gt;. We do not specify  the actual controller in this template. We will use the directive function to wire things up instead.&lt;/p&gt;

&lt;p&gt;Here is the complete HTML template used to create &lt;code&gt;&amp;lt;month picker&amp;gt;&lt;/code&gt;, note no reference to scope:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;month-picker&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;button&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;         &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;month-button btn btn-default col-md-4&amp;quot;&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;         &lt;span class=&quot;na&quot;&gt;ng-repeat=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;month in vm.months&amp;quot;&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;         &lt;span class=&quot;na&quot;&gt;ng-class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;{ &amp;#39;active&amp;#39;: vm.isSelected(month) }&amp;quot;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt;         &lt;span class=&quot;na&quot;&gt;ng-click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;vm.selectMonth(month)&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt;     &lt;span class=&quot;nt&quot;&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;8&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;a-controller-function-to-feed-the-template&quot;&gt;2. A controller function to feed the template&lt;/h3&gt;
&lt;p&gt;A controller function is needed to feed our template. Angular 1.2 introduced the &lt;code&gt;Controller As&lt;/code&gt; syntax which means we can drop reference to &lt;code&gt;$scope&lt;/code&gt; from the controllers. Our controller function uses this new syntax:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; 	&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 	
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 	&lt;span class=&quot;c1&quot;&gt;// api&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 	
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 	&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isSelected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isSelected&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; 	&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;months&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Jan&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Feb&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Mar&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Apr&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;May&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Jun&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Jul&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Aug&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Sep&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Oct&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Nov&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Dec&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 	&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 	&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 	&lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectMonth&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectMonth&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 	&lt;span class=&quot;c1&quot;&gt;// api methods&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; 	
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; 	&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; 	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; 	&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;selectMonth&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; 	&lt;span class=&quot;c1&quot;&gt;// refactor to switch&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isMultiMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; 			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;isSelected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt;                  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt;                  &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;splice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt;                  &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt;              &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt;              &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt;              &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;month&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt;          &lt;span class=&quot;nx&quot;&gt;monthSelectedExpressionCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;32&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;33&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;34&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// private methods&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;35&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;36&lt;/span&gt;      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;isMultiMode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;37&lt;/span&gt;          &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;multi&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;true&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;38&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;39&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;40&lt;/span&gt;      &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;monthSelectedExpressionCallback&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;41&lt;/span&gt;          &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;monthSelectedExpression&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;month&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selected&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;42&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;43&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;a-directive-function-to-configure-the-component&quot;&gt;3. A directive function to configure the component&lt;/h3&gt;

&lt;p&gt;The directive function is used to tie the pieces together and provide configuration of how the directive will work. The function must return a ‘Directive Definition Object’, basically an object with a number of properties describing how the directive works. The full list is &lt;a href=&quot;https://docs.angularjs.org/api/ng/service/$compile&quot;&gt;here&lt;/a&gt;, but we generally just use a subset corresponding to our requirements.&lt;/p&gt;

&lt;p&gt;Here is the directive function we will be using for &lt;code&gt;&amp;lt;month-picker&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;      		&lt;span class=&quot;nx&quot;&gt;templateUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;monthPicker/monthPicker.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt;          &lt;span class=&quot;nx&quot;&gt;restrict&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;AE&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;          &lt;span class=&quot;nx&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt;          &lt;span class=&quot;nx&quot;&gt;scope&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt;              &lt;span class=&quot;nx&quot;&gt;multi&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;@?&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt;              &lt;span class=&quot;nx&quot;&gt;monthSelectedExpression&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt;          &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;          &lt;span class=&quot;nx&quot;&gt;controllerAs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;ctrl&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt;          &lt;span class=&quot;nx&quot;&gt;bindToController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first four properties relate to the template, beginning with the &lt;code&gt;templateUrl&lt;/code&gt; itself. Next we &lt;code&gt;restrict&lt;/code&gt; usage of the directive to Attributes and Elements, meaning we will be able to write these:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;month-picker&amp;gt;&amp;lt;/month-picker&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;month-picker&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But not the less common:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;month-picker&amp;#39;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- month-picker --&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;replace&lt;/code&gt; property is set &lt;code&gt;true&lt;/code&gt;, meaning the &lt;code&gt;&amp;lt;month-picker&amp;gt;&lt;/code&gt; tags will not be in the compiled DOM, but replaced entirely by our HTML template. The default is false, which would put the templates contents within &lt;code&gt;&amp;lt;month-picker&amp;gt;&lt;/code&gt; tags.&lt;/p&gt;

&lt;p&gt;Wiring the controller to &lt;code&gt;&amp;lt;month-picker&amp;gt;&lt;/code&gt; is done with the last three properties. The &lt;code&gt;controller&lt;/code&gt; property of the directive specifies which controller function to use. In this case the controller function is in the same file as the directive function, so it is just referenced by name. We then specify what to call the controller object when it is used in the HTML template. Of course, this can be different to what is actually used in the controller (which is simply a reference to &lt;code&gt;this&lt;/code&gt;) but I have called them both &lt;code&gt;ctrl&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finally, we specify &lt;code&gt;bindToController&lt;/code&gt; as &lt;code&gt;true&lt;/code&gt;. This is a new feature in 1.3, and its set to change in 1.4 to something more useful, but for now just include it or it won’t work. &lt;/p&gt;

&lt;h3 id=&quot;a-module-to-keep-it-all-in&quot;&gt;4. A module to keep it all in&lt;/h3&gt;
&lt;p&gt;Here is the complete module definition for the month picker component, showing the directive and controller functions previously discussed:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;angular&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;monthPickerModule&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;monthPicker&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt;          &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;MonthPickerController&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;directive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 	
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; 	&lt;span class=&quot;c1&quot;&gt;// ... code ommited ...	&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 	
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 	
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; 	&lt;span class=&quot;c1&quot;&gt;// ... code ommited ...	&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; 	
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I had planned to look at how we can test our new component, but I’ll save that for my next post.&lt;/p&gt;

&lt;h3 id=&quot;testing-the-component&quot;&gt;Testing the component&lt;/h3&gt;
&lt;p&gt;Before concluding, lets look at how we can test out new component.&lt;/p&gt;

&lt;pre&gt;
  Given a MonthPicker directive
    when in default mode
      ✓ should be properly set up
      ✓ should have a months object with the 12 months
      ✓ should create 12 buttons
      ✓ should have labels on the buttons corresponding to the months
      ✓ should mark a single button clicked as active
      ✓ should return single month corresponding to selected button
    when in multi mode
      ✓ should mark all buttons clicked as active
      ✓ should toggle active buttons to inactive
      ✓ should return months corresponding to selected buttons

&lt;/pre&gt;

&lt;h2 id=&quot;notes&quot;&gt;Notes&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;In 1.4 an improvement to &lt;code&gt;bindToController&lt;/code&gt; .&lt;/li&gt;
  &lt;li&gt;You are free to use whichever makes sense to your situation. The first approach has a nice Domain-Specific-Language feel, but is not supported below IE9. The last 2 are rare cases. In the directive function below I have chosen to &lt;code&gt;restrict&lt;/code&gt; usage to &lt;code&gt;AE&lt;/code&gt;, which leaves the developer using the directive free to choose between the first two options above. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[test]/2015/03/29/angular/&lt;/p&gt;

&lt;p&gt;title: Part 2 - Structuring a page using Angular 1.3 directives and multi transclusion
title: Part 3 - Communication between directives
title: Part 4 - BDD using Cucumnber&lt;/p&gt;

&lt;p&gt;The latter point is taken care of by having the directive evaluate an expression in the scope where the element is located. Achived here using &lt;code&gt;month-selected-expression&lt;/code&gt; call &lt;code&gt;someFunction&lt;/code&gt; (above, line 2) on whichever scope the tag is included in. This function is passed an object that represents the selected month, so we can do something with that information.&lt;/p&gt;
</description>
        <pubDate>Sun, 29 Mar 2015 00:00:00 +0000</pubDate>
        <link>/2015/03/29/angular/</link>
        <guid isPermaLink="true">/2015/03/29/angular/</guid>
        
        <category>DDD</category>
        
        <category>JPA</category>
        
        
      </item>
    
      <item>
        <title>AngularJS Directives as Web Components</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;judging from mailing list, IRC questions, and so on … there’s a lot of confusion about them [directives] … its probably my fault. I should have done a better job documenting&lt;/p&gt;

  &lt;p&gt;– (Angular creator)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;AngularJs is a powerful and flexible framework, but badly documented in some places. Directives are the [killer] feature, but writing them can be very confusing, and there is also not much on best practices or general high-level design patterns, so even getting to writing them as a fundamental development activity is not [encouraged].&lt;/p&gt;

&lt;p&gt;It is also moving at a fast pace. Some of the features discussed here was introduced in version 1.2 (first released Nov 2013) or 1.3 (Oct 2014) – so things are moving at pace in the Angular world. Also, new features in 1.4 are set to slightly change how we do things. And Angular 2 is on the horizon, and its promise of Web Components.&lt;/p&gt;

&lt;p&gt;In a series of posts, I’d like to look at what we can do right now, with Angular 1.3, to create re-usable components, and extend HTML to the needs of our application. Effectibvely making HTML into a Domain Specific Language.&lt;/p&gt;

&lt;h3 id=&quot;the-application&quot;&gt;The application&lt;/h3&gt;

&lt;h3 id=&quot;the-extended-html&quot;&gt;The extended HTML&lt;/h3&gt;

&lt;h3 id=&quot;the-components&quot;&gt;The components&lt;/h3&gt;

</description>
        <pubDate>Sat, 28 Mar 2015 00:00:00 +0000</pubDate>
        <link>/2015/03/28/angular-1/</link>
        <guid isPermaLink="true">/2015/03/28/angular-1/</guid>
        
        <category>DDD</category>
        
        <category>JPA</category>
        
        
      </item>
    
      <item>
        <title>Domain Object Security without ACLs using Spring Security 3.2</title>
        <description>&lt;p&gt;In the &lt;a href=&quot;/spring-security-1&quot;&gt;previous post&lt;/a&gt; I looked at adapting Spring Security to work with Permissions to avoid hard-coding Roles into the security configuration. Writing this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PreAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hasAuthority(&amp;#39;PERM_READ_FOO&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readFoo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Instead of this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PreAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hasRole(&amp;#39;ROLE_USER&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readFoo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Although this provides more flexibility, it is often not enough. We may need to check a users permission to access particular objects within our domain.&lt;/p&gt;

&lt;p&gt;While system-wide fine grained domain object security should find us reaching for the Access Control List (ACL) schema, there are situations where an ACL approach would be overkill. &lt;/p&gt;

&lt;p&gt;Spring Security is highly configurable, providing numerous hooks into its framework. Continuing with the example in my previous post, I want to show two methods of introducing domain object security that do not rely on ACLs.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tony-waters/example-spring-security/tree/2-domain-object-authorisation&quot;&gt;Source code&lt;/a&gt; is available on GitHub.&lt;/p&gt;

&lt;h3 id=&quot;domain-object-security-using-a-custom-permissionevaluator&quot;&gt;Domain object security using a Custom PermissionEvaluator&lt;/h3&gt;

&lt;p&gt;One approach in Spring Security is to provide a custom &lt;code&gt;PermissionEvaluator&lt;/code&gt;, which:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… is intended to bridge between the expression system and Spring Security’s ACL system, allowing you to specify authorization constraints on domain objects, based on abstract permissions. It has no explicit dependencies on the ACL module, &lt;strong&gt;so you could swap that out for an alternative implementation if required&lt;/strong&gt;. (&lt;a href=&quot;http://docs.spring.io/spring-security/site/docs/3.2.6.RELEASE/reference/htmlsingle/&quot;&gt;Spring 3.2.6 Docs&lt;/a&gt; - my emphasis)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The &lt;code&gt;PermissionEvaluator&lt;/code&gt; has the following interface:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;PermissionEvaluator&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AopInfrastructureBean&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt;     		&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt;     		&lt;span class=&quot;n&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The idea is that you use the first method if you have the object itself, and the second method if you just have the ID. The methods correspond to the following expressions within our service methods (the &lt;code&gt;Authentication&lt;/code&gt; parameter is automatically added by Spring):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PreAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hasPermission(#member, &amp;#39;isOwner&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PreAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;hasPermission(#id, &amp;#39;Member&amp;#39;, &amp;#39;isOwner&amp;#39;)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;deleteMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;By default, Spring uses a &lt;code&gt;DenyAllPermissionEvaluator&lt;/code&gt;, which simply denies all requests from &lt;code&gt;hasPermission&lt;/code&gt;. We will replace this with our own implementation. &lt;/p&gt;

&lt;p&gt;Lets say we wanted to restrict operations on a &lt;code&gt;Member&lt;/code&gt; object to just the owner of that object. Here is a simple implementation of &lt;code&gt;PermissionEvaluator&lt;/code&gt; that does this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberPermissionEvaluator&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PermissionEvaluator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; 	
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 	&lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 	&lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MemberRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; 	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 		&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; 		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; 	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; 	&lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; 	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Serializable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;permission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;20&lt;/span&gt; 		&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;21&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetId&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;instanceof&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Member&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;22&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;23&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;memberRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;24&lt;/span&gt; 			&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;25&lt;/span&gt; 				&lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;26&lt;/span&gt; 				&lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;27&lt;/span&gt; 			&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;28&lt;/span&gt; 		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;29&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;30&lt;/span&gt; 	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;31&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now when we run our tests, a logged in user can only perform operations on its own associated &lt;code&gt;Member&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Although it has not been used in this example, we could further refine our requirements by considering other permissions. As well as checking for &lt;code&gt;isOwner&lt;/code&gt;, we may want to check for &lt;code&gt;isEditor&lt;/code&gt;, &lt;code&gt;isReviewer&lt;/code&gt;, and so on. It would not be too much work to write a better &lt;code&gt;PermissionEvaluator&lt;/code&gt; to do this.&lt;/p&gt;

&lt;p&gt;Also, Since Spring Security uses a single &lt;code&gt;PermissionEvaluator&lt;/code&gt;, should we require similar restrictions placed on other objects (which is likely), then we would have to write a better &lt;code&gt;PermissionEvaluator&lt;/code&gt; that delegated to other &lt;code&gt;PermissionEvaluators&lt;/code&gt;&lt;sup&gt;&lt;a href=&quot;#notes&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;

&lt;p&gt;While the &lt;code&gt;PermissionEvaluator&lt;/code&gt; provides a flexible hook into Spring Security, there is some boilerplate code to write if we want to deal with anything except the simplest requirements. At the other extreme, the flexibility of the &lt;code&gt;PermissionEvaluator&lt;/code&gt; interface can sometimes make it appear over-general for simple domain object needs – like the example given here – leaving us having to work with unecessarily complex signitures and generic &lt;code&gt;Objects&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;An alternative is to use Spring’s Expression Language.&lt;/p&gt;

&lt;h3 id=&quot;domain-object-security-using-spring-expression-language&quot;&gt;Domain Object security using Spring Expression Language&lt;/h3&gt;
&lt;p&gt;Because the string passed into &lt;code&gt;@PreAuthorize&lt;/code&gt; and &lt;code&gt;@PostAuthorize&lt;/code&gt; annotations is parsed as a Spring Expression Langauge (SpEL) expression, we can write something like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PreAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;#member.username == principal.username&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Where &lt;code&gt;#member&lt;/code&gt; references an argument in the method signature. That is to say, it refers to the object that is passed in to the method when the security check is performed. And &lt;code&gt;principal&lt;/code&gt; is the currently logged-in user. The available variables are derived from &lt;code&gt;SecurityExpressionRoot&lt;/code&gt;, with others added depending on the context. In our example we also have access to the public fields and methods from &lt;code&gt;MethodSecurityExpressionRoot&lt;/code&gt;. This latter class provides a &lt;code&gt;getReturnObject()&lt;/code&gt; method, which allows us to write:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PostAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;returnObject!=null and returnObject.username.equals(principal.username)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is an extremely powerful feature. We can use it to construct increasingly detailed security constraints for our application.&lt;/p&gt;

&lt;p&gt;Since our security expressions could get complex, we won’t do that. Instead, lets encapsulate this into a component:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;memberPermissions&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberPermissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isOwner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 		&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecurityContextHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Explression Language allows accessing any registered bean by preceding it with an &lt;code&gt;@&lt;/code&gt; symbol&lt;sup&gt;&lt;a href=&quot;#notes&quot;&gt;[2]&lt;/a&gt;&lt;/sup&gt;. Since &lt;code&gt;MemberPermissions&lt;/code&gt; is a &lt;code&gt;Component&lt;/code&gt; we can access it from our method security annotations using its name, &lt;code&gt;memberPermissions&lt;/code&gt;. From there we can call one of its methods, passing a &lt;code&gt;Member&lt;/code&gt; object as a parameter: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PreAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@memberPermissions.isOwner(#member)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Similarly, we can use the &lt;code&gt;getReturnObject()&lt;/code&gt; method from &lt;code&gt;MethodSecurityExpressionRoot&lt;/code&gt; to authorise based on a methods return value:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PostAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@memberPermissions.isOwner(returnObject)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;readMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we want to add more permissions, we just add other methods:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt; 1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Component&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;memberPermissions&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 2&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MemberPermissions&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 3&lt;/span&gt; 
&lt;span class=&quot;lineno&quot;&gt; 4&lt;/span&gt; 	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isOwner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 5&lt;/span&gt; 		&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 6&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 7&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;Authentication&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SecurityContextHolder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 8&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;authentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getPrincipal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt; 9&lt;/span&gt; 			&lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;10&lt;/span&gt; 		&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;11&lt;/span&gt; 		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;12&lt;/span&gt; 	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;13&lt;/span&gt; 	
&lt;span class=&quot;lineno&quot;&gt;14&lt;/span&gt; 	&lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isCollaborator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;15&lt;/span&gt; 	
&lt;span class=&quot;lineno&quot;&gt;16&lt;/span&gt; 		&lt;span class=&quot;c1&quot;&gt;// ... code here ...&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;17&lt;/span&gt; 		
&lt;span class=&quot;lineno&quot;&gt;18&lt;/span&gt; 	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;19&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And if we want to work with other domain objects we can give that type its own &lt;code&gt;***Permissions&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;Its hard not to like this approach. Apart from the &lt;code&gt;@Component&lt;/code&gt; annotation, there is no other configuration necessary. We can use &lt;code&gt;MemberPermissions&lt;/code&gt; within our security annotations straight away. This makes adding new domain object security rules straightforward. We can also easily add other methods (like &lt;code&gt;isEditor()&lt;/code&gt;, &lt;code&gt;isReviewer()&lt;/code&gt;) just by adding another method to &lt;code&gt;MemberPermissions&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;There is a great deal of flexibility here too. For example, if we so choose we can pass in in a value for the current &lt;code&gt;principal&lt;/code&gt;in the authorisation annotations:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PreAuthorize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;@memberPermissions.isOwner(#member, principal)&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;updateMember&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And so simplify our &lt;code&gt;MemberPermissions&lt;/code&gt; code (note the automatic casting to &lt;code&gt;UserDetails&lt;/code&gt;):&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;lineno&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;isOwner&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Member&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UserDetails&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;2&lt;/span&gt; 	&lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;3&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;4&lt;/span&gt; 		&lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;principal&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;equals&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;targetDomainObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getUsername&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;5&lt;/span&gt; 	&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;6&lt;/span&gt; 	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasPermission&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;lineno&quot;&gt;7&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Other nice things about this approach when compared to using a custom &lt;code&gt;PermissionEvaluator&lt;/code&gt; include the lack of superfluous code, the cleaner design (we can choose to implement it as we wish), the use of &lt;code&gt;Member&lt;/code&gt; explicitly rather than generic &lt;code&gt;Objects&lt;/code&gt; and the corresponding automatic casting.&lt;/p&gt;

&lt;h3 id=&quot;and-finally-&quot;&gt;And finally …&lt;/h3&gt;
&lt;p&gt;Be aware that these expressions have changed a little over time, for example in earlier versions of Spring Security you would write the expression without the &lt;code&gt;@&lt;/code&gt; symbol (see Note 2 below).&lt;/p&gt;

&lt;p&gt;The source is available on &lt;a href=&quot;https://github.com/tony-waters/example-spring-security/tree/2-domain-object-authorisation&quot;&gt;GitHub&lt;/a&gt;. It contains all the examples here including some basic tests. &lt;/p&gt;
&lt;hr /&gt;

&lt;h2 id=&quot;a-namenotesanotes&quot;&gt;&lt;a name=&quot;notes&quot;&gt;&lt;/a&gt;Notes&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Examples of how to do this can be seen &lt;a href=&quot;http://blog.solidcraft.eu/2011/03/spring-security-by-example-securing.html&quot;&gt;here&lt;/a&gt;, &lt;a href=&quot;http://www.disasterarea.co.uk/blog/protecting-service-methods-with-spring-security-annotations/&quot;&gt;here&lt;/a&gt;, and &lt;a href=&quot;http://www.borislam.com/2012/08/writing-your-spring-security-expression.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;This feature is not available in Spring Security 3.0. It is available 3.1 but you must leave out the &lt;code&gt;@&lt;/code&gt; symbol. It works as shown in 3.2. See &lt;a href=&quot;http://forum.spring.io/forum/spring-projects/security/100708-spel-and-spring-security-3-accessing-bean-reference-in-preauthorize&quot;&gt;here&lt;/a&gt; for discussion and a workaround for Spring Security 3.0.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/expressions.html&quot;&gt;Spring Expression Language Reference&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 17 Mar 2015 00:00:00 +0000</pubDate>
        <link>/2015/03/17/spring-security-2/</link>
        <guid isPermaLink="true">/2015/03/17/spring-security-2/</guid>
        
        
      </item>
    
      <item>
        <title>Users, Roles and Permissions (unobtrusively) with Spring Security 3.2 using JPA and Java config</title>
        <description>&lt;p&gt;Spring Security 3 (documentation and standard schemas) doesn’t seem to allow for the common configuration of User -&amp;gt; Role -&amp;gt; Permission, and instead leans towards hard-coding roles into the security configuration. It encourages us to do this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@PreAuthorize(&quot;hasRole('ROLE_USER')&quot;)
boolean readFoo();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;… rather than this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@PreAuthorize(&quot;hasAuthority('PERM_READ_FOO')&quot;)
boolean readFoo();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I want to show how we can use Spring Security 3 for unobtrusively implementing authorisation, where:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Authorisation is based on Permissions, not Roles&lt;/li&gt;
  &lt;li&gt;The core domain model has no knowledge of the security model&lt;/li&gt;
  &lt;li&gt;The security model has no knowledge of how it is implemented (ie. Spring Security)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Source code and tests can be found on &lt;a href=&quot;https://github.com/tony-waters/example-spring-security/tree/1-permission-based-authorisation&quot;&gt;GitHub&lt;/a&gt;. Best understanding can be obtained by running the tests there, but here’s the walk-through:&lt;/p&gt;

&lt;h2 id=&quot;the-core-domain&quot;&gt;The core domain&lt;/h2&gt;
&lt;p&gt;To begin, we will create an entity for our core domain which represents a &lt;code&gt;Member&lt;/code&gt; – basically a registered user in the system:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Entity
@Table(name=&quot;MEMBER&quot;)
public class Member {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = &quot;ID&quot;)
	private Long entityId;

	@Version
	@Column(name = &quot;VERSION&quot;)
	private Integer version;

	@Column(name = &quot;USERNAME&quot;)
	private String username;

	@Column(name = &quot;FIRST_NAME&quot;)
	private String firstName;

	@Column(name = &quot;LAST_NAME&quot;)
	private String lastName;

	public String getUsername() {
		return username;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the SQL:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table MEMBER (
    ID bigint generated by default as identity,
    FIRST_NAME varchar(255),
    LAST_NAME varchar(255),
    USERNAME varchar(255),
    VERSION integer,
    primary key (ID)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have only included this class to represent the core domain, and show how it is not aware of either the security domain nor the security implementation. The only connection between a member and the security domain is the username.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Member&lt;/code&gt; knows nothing of security concerns.&lt;/p&gt;

&lt;h2 id=&quot;the-security-domain&quot;&gt;The security domain&lt;/h2&gt;
&lt;p&gt;We define a separate security domain where we describe the security needs of our application. A user of our system (a &lt;code&gt;Member&lt;/code&gt;) has a related &lt;code&gt;Credentials&lt;/code&gt; in the security domain (containing a username and password):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Entity
@Table(name=&quot;CREDENTIALS&quot;)
public class Credentials {

	@Id
	@Column(name = &quot;USERNAME&quot;)
	private String username;
	
	@Column(name = &quot;PASSWORD&quot;)
	private String password;
	
	@Column(name = &quot;ENABLED&quot;)
	private Boolean enabled;
	
	@Version
	@Column(name = &quot;VERSION&quot;)
	private Integer version;
	
	@ManyToMany
	@JoinTable(
		name = &quot;CREDENTIALS_ROLE&quot;, 
		joinColumns = {@JoinColumn(name = &quot;USERNAME&quot;, referencedColumnName = &quot;USERNAME&quot;)}, 
		inverseJoinColumns = {@JoinColumn(name = &quot;ROLE_ID&quot;, referencedColumnName = &quot;ID&quot;)}
	)
	private Collection&amp;lt;Role&amp;gt; roles = new HashSet&amp;lt;Role&amp;gt;();
	
	// ... code omitted for brevity ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Specific &lt;code&gt;Credentials&lt;/code&gt; are associated with one or more &lt;code&gt;Roles&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Entity
@Table(name=&quot;ROLE&quot;)
public class Role {
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = &quot;ID&quot;)
	private Long entityId;

	@Version
	@Column(name = &quot;VERSION&quot;)
	private Integer version;
	
	@Column(name=&quot;NAME&quot;)
	private String name;
	
	@ManyToMany
	@JoinTable(
		name = &quot;ROLE_PERMISSION&quot;, 
		joinColumns = {@JoinColumn(name = &quot;ROLE_ID&quot;, referencedColumnName = &quot;ID&quot;)}, 
		inverseJoinColumns = {@JoinColumn(name = &quot;PERMISSION_ID&quot;, referencedColumnName = &quot;ID&quot;)}
	)
	private Collection&amp;lt;Permission&amp;gt; permissions = new HashSet&amp;lt;Permission&amp;gt;();
	
	// ... code omitted for brevity ...

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And a &lt;code&gt;Role&lt;/code&gt; is associated with one or more &lt;code&gt;Permissions&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Entity
@Table(name=&quot;PERMISSION&quot;)
public class Permission {

	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = &quot;ID&quot;)
	private Long entityId;

	@Version
	@Column(name = &quot;VERSION&quot;)
	private Integer version;
	
	@Column(name=&quot;NAME&quot;)
	private String name;

	// ... code omitted for brevity ...
	
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Although representing security concerns, these three classes know nothing of how those concerns are implemented. There is no reference to Spring Security anywhere in the &lt;a href=&quot;https://github.com/tony-waters/example-spring-security/tree/1-permission-based-authorisation/src/main/java/com/example/model/security&quot;&gt;source code&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;Their JPA mappings produce the following five tables:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table CREDENTIALS (
    USERNAME varchar(255) not null,
    ENABLED boolean,
    PASSWORD varchar(255),
    VERSION integer,
    primary key (USERNAME)
)

create table ROLE (
    ID bigint generated by default as identity,
    NAME varchar(255),
    VERSION integer,
    primary key (ID)
)

create table PERMISSION (
    ID bigint generated by default as identity,
    NAME varchar(255),
    VERSION integer,
    primary key (ID)
)

create table CREDENTIALS_ROLE (
    USERNAME varchar(255) not null,
    ROLE_ID bigint not null
)

create table ROLE_PERMISSION (
    ROLE_ID bigint not null,
    PERMISSION_ID bigint not null
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Having created our security domain classes, lets look at how we would implement this using ‘out-of-the-box’ Spring Security.&lt;/p&gt;

&lt;h2 id=&quot;spring-security----userdetailsservice-userdetails-and-grantedauthority&quot;&gt;Spring Security – UserDetailsService, UserDetails, and GrantedAuthority&lt;/h2&gt;
&lt;p&gt;In order to slot into the Spring Security infrastructure we will be working with three Spring interfaces from the &lt;code&gt;org.springframework.security.core&lt;/code&gt; package.&lt;/p&gt;

&lt;p&gt;First, &lt;code&gt;UserDetailsService&lt;/code&gt;, which is the entry point in this code for Spring Security. It will load the &lt;code&gt;UserDetails&lt;/code&gt; associated with the provided username:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface UserDetailsService {
    UserDetails loadUserByUsername(String username) throws UsernameNotFoundException;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;UserDetails&lt;/code&gt; contains security-related information about the user, including what they are allowed to do (&lt;code&gt;GrantedAuthority&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface UserDetails extends Serializable {
    Collection&amp;lt;? extends GrantedAuthority&amp;gt; getAuthorities();
    String getPassword();
    String getUsername();
    boolean isAccountNonExpired();
    boolean isAccountNonLocked();
    boolean isCredentialsNonExpired();
    boolean isEnabled();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A &lt;code&gt;GrantedAuthority&lt;/code&gt; is a string representation of a permission the user has, such as &lt;code&gt;PERM_READ_FOO&lt;/code&gt; or &lt;code&gt;PERM_DELETE_FOO&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public interface GrantedAuthority extends Serializable {
    String getAuthority();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To use Spring Security we will implement a version of &lt;code&gt;UserDetails&lt;/code&gt; and &lt;code&gt;UserDetailsService&lt;/code&gt; that works with our security domain classes.&lt;/p&gt;

&lt;h2 id=&quot;implementing-the-security-domain-classes-using-spring-security&quot;&gt;Implementing the security domain classes using Spring Security&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;CredentialsAdapter&lt;/code&gt; is used to integrate our security domain with Spring Security. It adapts a &lt;code&gt;Credentials&lt;/code&gt; object so it may be treated as a &lt;code&gt;UserDetails&lt;/code&gt; object:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class CredentialsAdapter implements UserDetails {
	
	private Credentials credentials;
	
	public CredentialsAdapter(Credentials credentials) {
		this.credentials = credentials;
	}
	
	@Override
	public Collection&amp;lt;GrantedAuthority&amp;gt; getAuthorities() {
		Set&amp;lt;GrantedAuthority&amp;gt; authorities = new HashSet&amp;lt;GrantedAuthority&amp;gt;();
		for(Role role : credentials.getRoles()) {
			for(Permission permission : role.getPermissions()) {
				authorities.add(new SimpleGrantedAuthority(permission.getName()));
			}
		}
		return authorities;
	}

	@Override
	public String getPassword() {
		return credentials.getPassword();
	}

	@Override
	public String getUsername() {
		return credentials.getUsername();
	}

	// ... code omitted for brevity ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice that &lt;code&gt;getAuthorities()&lt;/code&gt; now returns a collection of &lt;code&gt;Credentials&lt;/code&gt; -&amp;gt; &lt;code&gt;Roles&lt;/code&gt; -&amp;gt; &lt;code&gt;Permissions&lt;/code&gt;, rather than &lt;code&gt;Credentials&lt;/code&gt; -&amp;gt; &lt;code&gt;Roles&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We use the &lt;code&gt;CredentialsAdapter&lt;/code&gt; in our implementation of &lt;code&gt;UserDetailsService&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Service(&quot;authService&quot;)
@Transactional
public class CredentialsService implements UserDetailsService {
	
	@Autowired
	private CredentialsRepository credentialsRepository;
	
	@Override
	public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {
		Credentials credentials = credentialsRepository.findOne(username);
		if(credentials == null) {
			throw new UsernameNotFoundException(username);
		}
		return new CredentialsAdapter(credentials);
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So we can now write this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@PreAuthorize(&quot;hasRole('PERM_READ_FOO')&quot;)
boolean readFoo();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And avoid hard-coding roles into our system. Though it would be nicer to have something more descriptive than &lt;code&gt;hasRole&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Fortunately, the root class for dealing with Spring Security expression evaluation (&lt;code&gt;org.springframework.security.access.expression.SecurityExpressionRoot&lt;/code&gt;) provides an &lt;code&gt;hasAuthority()&lt;/code&gt; method which simply calls the &lt;code&gt;hasRole()&lt;/code&gt; method. So we can write:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@PreAuthorize(&quot;hasAuthority('PERM_READ_FOO')&quot;)
boolean readFoo();
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;While Spring Security doesn’t appear to support it ‘out-of-the-box’, it is easily adapted to work in an environment where:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Authorisation is based on Permissions, not Roles&lt;/li&gt;
  &lt;li&gt;The core domain model has no knowledge of the security model&lt;/li&gt;
  &lt;li&gt;The security model has no knowledge of how it is implemented (ie. Spring Security)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Source code and tests can be found on &lt;a href=&quot;https://github.com/tony-waters/example-spring-security/tree/1-permission-based-authorisation&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Wed, 11 Mar 2015 00:00:00 +0000</pubDate>
        <link>/2015/03/11/spring-security-1/</link>
        <guid isPermaLink="true">/2015/03/11/spring-security-1/</guid>
        
        
      </item>
    
      <item>
        <title>Mapping DDD Value Objects using JPA - Part 2</title>
        <description>&lt;blockquote&gt;
  &lt;p&gt;Tracking the identity of ENTITIES is essential, but attaching identity to other objects can hurt system performance, add analytical work, and muddle the model by making all objects look the same. (Evans 2003)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a &lt;a href=&quot;/value-objects&quot;&gt;previous post&lt;/a&gt; I looked at the &lt;a href=&quot;http://en.wikipedia.org/wiki/Domain-driven_design&quot;&gt;Domain Driven Design&lt;/a&gt; concept of Value Objects as outlined by Eric Evans (2003). In this second post I want to show how we can persist such objects to a relational database using JPA.&lt;/p&gt;

&lt;p&gt;In this example I’m using H2 as the database and Hibernate as the JPA provider. It has also been tested with EclipseLink. &lt;a href=&quot;https://github.com/tony-waters/example-value-objects&quot;&gt;Source code&lt;/a&gt; is available on GitHub.&lt;/p&gt;

&lt;h3 id=&quot;mapping-a-value-object-in-jpa-using-embeddable&quot;&gt;Mapping a Value Object in JPA using @Embeddable&lt;/h3&gt;
&lt;p&gt;The JPA Specification recognises that not everything is an Entity:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An entity may use other fine-grained classes to represent entity state. Instances of these classes, unlike entity instances, do not have persistent identity of their own. Instead, they exist only as part of the state of the entity to which they belong (JSR 338 - Java Persistence API 2.1)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These &lt;code&gt;Embeddable&lt;/code&gt; classes provides a convenient mapping for Value Objects. Here are the pertinent parts of the &lt;code&gt;Month&lt;/code&gt; class from &lt;a href=&quot;/value-objects&quot;&gt;Part 1&lt;/a&gt;, annotated as a JPA &lt;code&gt;Embeddable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Embeddable
public class Month implements Comparable&amp;lt;Month&amp;gt; {
	
	@Column(name=&quot;MONTH&quot;)
	private final String value;
	
	@SuppressWarnings(&quot;unused&quot;)
	private Month() {
		this.value = null;
	}

	public Month(String value) {
		if(!isValid(value)) {
			throw new DomainException(&quot;Not a valid month &quot; + value);
		}
		this.value = value;
	}

	// ... code omitted for brevity ...
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In line with the JPA Specification, we provide a no-argument constructor. Consequently we must also provide a value for any &lt;code&gt;final&lt;/code&gt; fields within this constructor. To prevent instantiation of this class without passing in a &lt;code&gt;value&lt;/code&gt; we make this constructor private, and add a &lt;code&gt;@SuppressWarnings&lt;/code&gt; annotation to remove the ensuing ‘never used locally’ warning.&lt;/p&gt;

&lt;p&gt;This is an example of JPA making demands upon how we construct our domain classes. It is in direct opposition to DDD which encourages us to only include what is required for the domain. To use DDD Value Objects in JPA some compramises may have to be made.&lt;/p&gt;

&lt;p&gt;To see &lt;code&gt;Month&lt;/code&gt; in action we include it in the Entity class &lt;code&gt;Foo&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Entity
@Table(name=&quot;FOO&quot;)
public class Foo {
	
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name=&quot;ID&quot;)
	private Long entityId;
	
	@Version
	@Column(name=&quot;VERSION&quot;)
	private Integer version;

	@Column(name=&quot;BAA&quot;)
	private String baa;
	
	@Embedded
	private Month birthMonth;
	
	// ... code omitted for brevity ...
	
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we launch the application Hibernate issues the following SQL to create the table:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table FOO (
	ID bigint generated by default as identity,
	BAA varchar(255),
	MONTH varchar(6),
	VERSION integer,
	primary key (ID)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;overiding-jpa-attributes-in-value-objects&quot;&gt;Overiding JPA Attributes in Value Objects&lt;/h3&gt;
&lt;p&gt;If we wanted to use the same Value Object in two places in the same Entity, this would give us two columns with the same name, which would be invalid. Neither would this work if we wanted a different column name depending on the Entity the Value Object is embedded into. &lt;/p&gt;

&lt;p&gt;JPA provides the &lt;code&gt;@AttributesOverride&lt;/code&gt; annotation for this purpose. As the name suggests, it is used to override the mapping of an Entity field, to allow for a different configuration in the database table:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Embedded
@AttributeOverride(name = &quot;value&quot;, column = @Column(name = &quot;BIRTH_MONTH&quot;))
private Month birthMonth;

@Embedded
@AttributeOverride(name = &quot;value&quot;, column = @Column(name = &quot;FOO_MONTH&quot;))
private Month fooMonth;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the new SQL produced by Hibernate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table FOO (
	ID bigint generated by default as identity,
	BAA varchar(255),
	BIRTH_MONTH varchar(255),
	FOO_MONTH varchar(255),
	VERSION integer,
	primary key (ID)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The presence of &lt;code&gt;AttributeOverride&lt;/code&gt; means an Entity can specify its own configuration for any &lt;code&gt;Embeddable&lt;/code&gt; classes it uses. Which makes &lt;code&gt;Embeddables&lt;/code&gt; re-usable across any number of Entities.&lt;/p&gt;

&lt;h3 id=&quot;overiding-jpa-attributes-in-composite-value-objects&quot;&gt;Overiding JPA Attributes in Composite Value Objects&lt;/h3&gt;
&lt;p&gt;In part 1 of this post I gave the  example of &lt;code&gt;MonthRange&lt;/code&gt; as a composite Value Object. Here is what it looks like as an &lt;code&gt;Embeddable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Embeddable
public class MonthRange {

	@AttributeOverride(name = &quot;value&quot;, column = @Column(name = &quot;START_MONTH&quot;))
	private final Month start;
	
	@AttributeOverride(name = &quot;value&quot;, column = @Column(name = &quot;END_MONTH&quot;))
	private final Month end;

	@SuppressWarnings(&quot;unused&quot;)
	private MonthRange() {
		this.start = null;
		this.end = null;
	}
	
	public MonthRange(Month start, Month end) {
		if(!isValid(start, end)) {
			throw new DomainException(&quot;Not a valid month range&quot;);
		}
		this.start = start;
		this.end = end;
	}
	
	// ... code omitted for brevity ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;MonthRange&lt;/code&gt; is an &lt;code&gt;Embeddable&lt;/code&gt; object, which is itself composed of &lt;code&gt;Embeddable&lt;/code&gt; objects. If we had two &lt;code&gt;MonthRange&lt;/code&gt; fields in an Entity, that would translate to four different &lt;code&gt;Month&lt;/code&gt; columns in the database.&lt;/p&gt;

&lt;p&gt;To override mappings at multiple levels of embedding dot notation is used in the &lt;code&gt;name&lt;/code&gt; element to specify fields within fields. &lt;/p&gt;

&lt;p&gt;Here is how we override the nested column configuration for these four &lt;code&gt;Months&lt;/code&gt; from within out &lt;code&gt;Foo&lt;/code&gt; Entity class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Entity
@Table(name=&quot;FOO&quot;)
public class Foo {
	
	// ... code omitted for brevity ...
	
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name = &quot;start.value&quot;, column = @Column(name = &quot;CURRENT_START_MONTH&quot;)),
		@AttributeOverride(name = &quot;end.value&quot;, column = @Column(name = &quot;CURRENT_END_MONTH&quot;))
	})
	private MonthRange currentMonthRange;
	
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name = &quot;start.value&quot;, column = @Column(name = &quot;PREVIOUS_START_MONTH&quot;)),
		@AttributeOverride(name = &quot;end.value&quot;, column = @Column(name = &quot;PREVIOUS_END_MONTH&quot;))
	})
	private MonthRange previousMonthRange;
	
	// ... code omitted for brevity ...
	
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s what it produces on Hibernate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table FOO (
	ID bigint generated by default as identity,
	BAA varchar(255),
	BIRTH_MONTH varchar(255),
	CURRENT_END_MONTH varchar(255),
	CURRENT_START_MONTH varchar(255),
	FOO_MONTH varchar(255),
	PREVIOUS_END_MONTH varchar(255),
	PREVIOUS_START_MONTH varchar(255),
	VERSION integer,
	primary key (ID)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;collections-of-embeddables&quot;&gt;Collections of Embeddables&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;A persistent field or property of an entity or embeddable class may correspond to a collection of a basic type or embeddable class (JSR 338 - Java Persistence API 2.1)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JPA allows for collections of &lt;code&gt;Embeddables&lt;/code&gt; via its &lt;code&gt;ElementCollection&lt;/code&gt; mapping. In this scenario the &lt;code&gt;Embeddables&lt;/code&gt; are held in a separate table rather than being embedded in the Entities table. Similar to a &lt;code&gt;OneToMany&lt;/code&gt; association, but without any requirement for inverse mapping. This is how we would add a collection of &lt;code&gt;Months&lt;/code&gt; to our &lt;code&gt;Foo&lt;/code&gt; Entity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@ElementCollection
@CollectionTable(name=&quot;FOO_MONTH&quot;, joinColumns=@JoinColumn(name=&quot;FOO_ID&quot;))
private Collection&amp;lt;Month&amp;gt; months = new ArrayList&amp;lt;Month&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s what Hibernate does with it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table FOO (
	ID bigint generated by default as identity,
	BAA varchar(255),
	BIRTH_MONTH varchar(255),
	CURRENT_END_MONTH varchar(255),
	CURRENT_START_MONTH varchar(255),
	FOO_MONTH varchar(255),
	PREVIOUS_END_MONTH varchar(255),
	PREVIOUS_START_MONTH varchar(255),
	VERSION integer,
	primary key (ID)
)

create table FOOBAA_MONTH (
	FOO_ID bigint not null,
	MONTH varchar(255)
)

alter table FOOBAA_MONTH 
	add constraint FK_f3gxv3hla3nch460sx3ss6oex 
	foreign key (FOO_ID) 
	references FOO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An important restriction on collections of &lt;code&gt;Embeddable&lt;/code&gt; classes is that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An embeddable class (including an embeddable class within another embeddable class) that is contained within an element collection must not contain an element collection&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which means we cannot nest a collection of &lt;code&gt;Embeddables&lt;/code&gt; within another collection of &lt;code&gt;Embeddables&lt;/code&gt;. While this restriction may seem like an ‘edge case’, it can sometimes force us to use an Entity in place of a Value Object.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;In Part 1 of this post I looked at the Domain Driven Design concept of Value Objects and outlined a way of creating such an object by following Eric Evans’ advice. In this follow-up post I have tried to show how &lt;code&gt;Embeddables&lt;/code&gt; provide an obvious means of mapping Value Objects to a relational database when using JPA.&lt;/p&gt;

&lt;p&gt;I’ve also tried to show how producing these mappings is not always such a ‘clean’ process. Compromises have to be made between the tenents of DDD and the platform used for its implementation.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/tony-waters/example-value-objects&quot;&gt;Source code&lt;/a&gt; for the examples shown here are available on GitHub.&lt;/p&gt;
</description>
        <pubDate>Tue, 10 Feb 2015 00:00:00 +0000</pubDate>
        <link>/2015/02/10/value-objects-2/</link>
        <guid isPermaLink="true">/2015/02/10/value-objects-2/</guid>
        
        <category>DDD</category>
        
        <category>JPA</category>
        
        
      </item>
    
      <item>
        <title>Mapping DDD Value Objects using JPA - Part 1</title>
        <description>&lt;p&gt;In a recent project I drew upon a number of concepts from &lt;a href=&quot;http://en.wikipedia.org/wiki/Domain-driven_design&quot;&gt;Domain Driven Design&lt;/a&gt;. Among them Value Objects, which Eric Evans says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;represent a descriptive aspect of the domain that has no conceptual identity (Evans 2003)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In terms of creating them he offers the following advice:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you care only about the attributes of an element of the model, classify it as a VALUE OBJECT. Making it express the meaning of attributes it conveys and give it related functionality. Treat the VALUE OBJECT as immutable. Don’t give it any identity and avoid the design complexities necessary to maintain ENTITIES (Evans 2003)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’d like to outline what a Value Object is in this context and show a simple approach to using them in an application that uses JPA with a relational database.&lt;/p&gt;

&lt;p&gt;By way of example I’ll use a (simplified) Value Object from my last project, &lt;code&gt;Month&lt;/code&gt; - which denotes a ‘specific month in a specific year’. It could be (and at some point was) represented by a &lt;code&gt;String&lt;/code&gt; with the format ‘yyyyMM’. I’ll try and show that representing it as a Value Object brings many advantages, including cleaner code, in-situ validation, and serving as a place to put increasing functionality as the project progresses.&lt;/p&gt;

&lt;h2 id=&quot;good-value-objects&quot;&gt;‘Good’ Value Objects&lt;/h2&gt;
&lt;p&gt;Re-jigging Evans quote, to make a good Value Object one must:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;make it express the meaning of its attribute(s)&lt;/li&gt;
  &lt;li&gt;treat it as immutable&lt;/li&gt;
  &lt;li&gt;don’t give it any identity&lt;/li&gt;
  &lt;li&gt;give it related functionality&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;make-it-express-the-meaning-of-its-attributes&quot;&gt;1. Make it express the meaning of its attribute(s)&lt;/h3&gt;
&lt;p&gt;The Value Object we want to create is used to represent a single attribute – a ‘month in a year’. It wraps a &lt;code&gt;String&lt;/code&gt; object that holds the month in the format ‘yyyyMM’. However, Evans seems to be steering us away from calling it something ending in &lt;code&gt;Wrapper&lt;/code&gt;, towards “expressing the meaning of the attribute it conveys”. To this end, we could choose to express this attribute in a class named something along the lines of &lt;code&gt;YearMonth&lt;/code&gt;, &lt;code&gt;MonthInYear&lt;/code&gt; or &lt;code&gt;Month&lt;/code&gt; &lt;sup&gt;&lt;a href=&quot;#notes&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Month {
	private final String value;

	public Month(String value) {
		this.value = value;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we work with months the code is more readable, conveying &lt;i&gt;the concept of the attribute being wrapped&lt;/i&gt;. &lt;/p&gt;

&lt;h3 id=&quot;treat-it-as-immutable&quot;&gt;2. Treat it as immutable&lt;/h3&gt;
&lt;p&gt;There are no setters in &lt;code&gt;Month&lt;/code&gt; to mutate the &lt;code&gt;value&lt;/code&gt;. And we’ve declared the field itself &lt;code&gt;final&lt;/code&gt;. This covers most usage scenarios for immutability. Of course, creating a robust immutable object in Java is &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/essential/concurrency/imstrat.html&quot;&gt;a little more involved&lt;/a&gt; than is shown here. Also, if we use reflection, nothing is immutable.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Immutability of an attribute or object can be declared in some languages and environments and not in others. These features are helpful for communication of the design decision, but not essential. (Evans 2003)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The important thing is that we &lt;i&gt;treat&lt;/i&gt; it as immutable, and try to make that clear to future maintainers of the system through the design on the class.&lt;/p&gt;

&lt;h3 id=&quot;dont-give-it-any-identity&quot;&gt;3. Don’t give it any identity&lt;/h3&gt;
&lt;p&gt;Value Objects have no identity apart from the combination of their field values. Thus two Value Objects with the same field values can be considered as the same object from the perspective of the application. &lt;/p&gt;

&lt;p&gt;It is common, then, to see Value Objects use all of their fields in &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; calculations. This is in opposition to an Entity where these methods usually compare on some form of ID.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Month&lt;/code&gt; has no database or domain identity, so no ID in the calculations. A combination of the fields are used instead (in this case the single field &lt;code&gt;value&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public int hashCode() {
	final int prime = 31;
	int result = 1;
	result = prime * result + ((value == null) ? 0 : value.hashCode());
	return result;
}

@Override
public boolean equals(Object obj) {
	if (this == obj) return true;
	if (obj == null) return false;
	if (getClass() != obj.getClass()) return false;
	Month other = (Month) obj;
	if (value == null) {
		if (other.value != null) return false;
	} else if (!value.equals(other.value)) {
		return false;
	}
	return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The fact that two different &lt;code&gt;Month&lt;/code&gt; objects are equal so long as their &lt;code&gt;value&lt;/code&gt; is the same should alert us to the fact this is indeed a Value Object. We should be able to exchange one Value Object for another without code that uses these objects caring.  &lt;/p&gt;

&lt;h3 id=&quot;give-it-related-functionality&quot;&gt;4. Give it related functionality&lt;/h3&gt;
&lt;p&gt;Our Value Object now becomes a magnet for any month-related functionality. We’ll start with some (over-simplified) validation, using a &lt;code&gt;static isValid()&lt;/code&gt; method so that calling code can do a pre-creation validity check if it so chooses:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Month {
	private final String value;

	public Month(String value) {
		if(!isValid(value)) {
			throw new DomainValidationException(&quot;Not a valid month &quot; + value);
		}
		this.value = value;
	}

	
	public static boolean isValid(String yearMonth) {
		if(yearMonth == null || !isInteger(yearMonth) || yearMonth.length() != 6) {
			return false;
		}
		return true;
	}
	
	private static boolean isInteger(String s) {
		try {
			Integer.parseInt(s);
		} catch(NumberFormatException e) {
			return false;
		}
		return true;
	}
	
	// ... code omitted for brevity ...
	
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;isValid()&lt;/code&gt; method is where we locate our increasing understanding of what it means for a &lt;code&gt;Month&lt;/code&gt; object to be valid. Through this process it becomes increasingly difficult to create an invalid &lt;code&gt;Month&lt;/code&gt;. And it’s always clear in our calling code that we are dealing with months:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String myMonthString = &quot;201501&quot;;
if(Month.isValid(myMonthString)) {
	new Month(myMonthString);
}

new Month(null); // throws Exception

new Month(&quot;20150&quot;); // throws Exception

new Month(&quot;abcdef&quot;); // throws Exception
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, whenever the need for new month-related functionality, there is an obvious place to put it. Here we add some functionality to compare two &lt;code&gt;Month&lt;/code&gt; objects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Month implements Comparable&amp;lt;Month&amp;gt; {
	
	// ... code omitted for brevity ...
		
	public boolean isBefore(Month other) {
		return this.compareTo(other) == -1;
	}
	
	public boolean isAfter(Month other) {
		return this.compareTo(other) == 1;
	}

	@Override
	public int compareTo(Month other) {
		if(other == null) {
			throw new NullPointerException();
		}
		Integer thisMonth = Integer.valueOf(this.value);
		Integer otherMonth = Integer.valueOf(other.getMonthAsString());
		if(thisMonth &amp;lt; otherMonth) {
			return -1;
		} else if(thisMonth &amp;gt; otherMonth) {
			return 1;
		}
		return 0;
	}

	// ... code omitted for brevity ...
	
}	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have followed Eric’s guidelines to identify/create a Value Object, let’s look moment at what we have gained.&lt;/p&gt;

&lt;h2 id=&quot;what-we-gain&quot;&gt;What we gain&lt;/h2&gt;
&lt;p&gt;First, because our concept of ‘month in a year’ is encapsulated in the &lt;code&gt;Month&lt;/code&gt; class, it is easily testable. If we had used a &lt;code&gt;String&lt;/code&gt; to represent it, we would undoubtedly be re-testing the responses to different month &lt;code&gt;Strings&lt;/code&gt; at various layers of the application, some of which may require a container. Although some of this testing may still be necessary, repetition is greatly reduced.&lt;/p&gt;

&lt;p&gt;Second, because a &lt;code&gt;Month&lt;/code&gt; validates itself, there is less validation code elsewhere. This is really a more specific version of the previous point. But given that we no longer need to test for responses to invalid values for the month &lt;code&gt;String&lt;/code&gt; anywhere else in the application, it deserves a mention. Since we can’t construct an invalid &lt;code&gt;Month&lt;/code&gt;, there is nothing to test for outside the &lt;code&gt;Month&lt;/code&gt; itself.&lt;/p&gt;

&lt;p&gt;Third, code that uses the &lt;code&gt;Month&lt;/code&gt; class becomes more succinct and more readable. Non-developers are more likely to understand the logic than if we had stuck to the &lt;code&gt;String&lt;/code&gt; representation.&lt;/p&gt;

&lt;p&gt;Forth, tracking the lifecycle of an Entity has a degree of overhead and complexity associated with it, even with modern ORM frameworks. If we utilise Value Objects fully we will have a simpler, more maintainable and performant system.&lt;/p&gt;

&lt;p&gt;There’s probably more.&lt;/p&gt;

&lt;p&gt;Before concluding Part 1 of this 2-part post, its worth mentioning another (perhaps obvious) feature of Value Objects.&lt;/p&gt;

&lt;h2 id=&quot;composite-value-objects&quot;&gt;Composite Value Objects&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A VALUE OBJECT can be an assemblage of other objects (Evans 2003)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you think about it, there is nothing to stop us creating Value Objects from other Value Objects.  Continuing our example with &lt;code&gt;Month&lt;/code&gt;, imagine a scenario where we wanted to represent a range of months:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MonthRange {

	private final Month start;
	
	private final Month end;
	
	public MonthRange(Month start, Month end) {
		if(!isValid(start, end)) {
			throw new DomainException(&quot;Not a valid month range&quot;);
		}
		this.start = start;
		this.end = end;
	}
	
	public static boolean isValid(Month start, Month end) {
		return start.isBefore(end);
	}

	// ... code omitted for brevity ...
	
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; of this new composite Value Object holds no reference to any identity, as we expect from a Value Object, and is instead made up of the objects constituent fields (themselves Value Objects):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((end == null) ? 0 : end.hashCode());
		result = prime * result + ((start == null) ? 0 : start.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		MonthRange other = (MonthRange) obj;
		if (end == null) {
			if (other.end != null)
				return false;
		} else if (!end.equals(other.end))
			return false;
		if (start == null) {
			if (other.start != null)
				return false;
		} else if (!start.equals(other.start))
			return false;
		return true;
	} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion-to-part-1&quot;&gt;Conclusion to Part 1&lt;/h2&gt;
&lt;p&gt;If you’re anything like me, at some point you will have thought “isn’t a lot of this just good design practice that applies to any class?” After all, giving classes meaningful names is just good practice. As is co-locating data and the methods that relate to it within a class – that’s just encapsulation! And this is of course true. In this sense a DDD Value Object is rooted in a wider context of Java best practices.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/value-objects-2&quot;&gt;Part 2&lt;/a&gt; of this post I will look at how &lt;code&gt;Embeddables&lt;/code&gt; provide a convenient way to represent Value Objects in a JPA environment.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;a-namenotesanotes&quot;&gt;&lt;a name=&quot;notes&quot;&gt;&lt;/a&gt;Notes&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;The project in question was using Java 7. I think &lt;code&gt;YearMonth&lt;/code&gt; is a good name to use for this concept, but since Java 8 has &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/index.html?java/time/package-summary.html&quot;&gt;a very nice time API&lt;/a&gt; (goodbye Joda-Time!) which, among other things, provides a &lt;code&gt;YearMonth&lt;/code&gt; class, this is perhaps not so good a choice.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.domaindrivendesign.org/books/evans_2003&quot;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt; – Eric Evans seminal 2003 work on Domain Driven Design.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;http://www.infoq.com/presentations/Value-Objects-Dan-Bergh-Johnsson&quot;&gt;Power Use of Value Objects in DDD&lt;/a&gt; – A great talk from 2009 by Dan Bergh Johnsson. He works through a detailed example of using Value Objects to simplify a program’s architecture and make it more readable and testable.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Thu, 05 Feb 2015 00:00:00 +0000</pubDate>
        <link>/2015/02/05/value-objects/</link>
        <guid isPermaLink="true">/2015/02/05/value-objects/</guid>
        
        <category>DDD</category>
        
        <category>JPA</category>
        
        
      </item>
    
      <item>
        <title>Using CORS to simplify development of distributed Server and Client applications</title>
        <description>&lt;p&gt;In these post-JSP days it can sometimes be convenient to develop your clent and server code completely separate, even though they may be co-located when in production. This is particularly the case when client and server portions are being worked on by different teams, but is not limited to this scenario. Separate development of client and server code can mean that the client has to make calls to a service on a different server (maybe in a different country, or just a different port on localhost), which may not be allowed because of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;Same-Origin Policy&lt;/a&gt; implemented by modern browsers.&lt;/p&gt;

&lt;p&gt;I found myself in such a situation last year when I was the sole developer of a Spring REST service which was used by an AngularJs client. My IDE, Eclipse, was great when developing the server code, but when I began the client code I was bedazzled by &lt;a href=&quot;https://blogs.oracle.com/geertjan/entry/integrated_angularjs_development&quot;&gt;the great support provided in NetBeans 8&lt;/a&gt;. Consequently I found myself switching between Eclipse and NetBeans depending upon whether I was writing server or client code. No real problem there. It seemed like the best of both worlds. That is until I began to make use of Angulars Ajax caperbilities to make calls to the REST server. Though they were both running on localhost, they were using different ports. Spring REST on the predictable &lt;code&gt;8080&lt;/code&gt;,  and NetBeans on &lt;code&gt;8383&lt;/code&gt;. Which from a Same Origin Policy perspective, is not allowed.&lt;/p&gt;

&lt;p&gt;Now, there’s obviously more than one way to solve this problem. I could co-locate the client and server source and configure the different IDEs to only act on different sections of it, or perform a little source copying during the build process to make sure everything was in one place. In both of these solutions the Same Origin Policy goes away because the client and server are co-located when running, and we can forget we ever heard of it.&lt;/p&gt;

&lt;p&gt;An alternative is to allow the client and server to be distributed (if only a port away) in the development environment(s). If we take this route, we have to tell the server to accept requests from locations other than its own using &lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;Cross-Origin Resource Sharing or CORS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In JEE we can do this using a &lt;code&gt;Filter&lt;/code&gt;. Add Spring to the mix and we can annotate the filter as a &lt;code&gt;@Component&lt;/code&gt; so it is included without having to do anything else. Here’s the finished class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Component;

@Component
public class CorsFilter implements Filter {

	public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
		HttpServletResponse response = (HttpServletResponse) res;
		response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);
		response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET, PUT, OPTIONS, DELETE&quot;);
		response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);
		response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;x-http-method-override, x-requested-with, content-Type, origin, authorization, accept, client-security-token&quot;);
		chain.doFilter(req, res);
	}

	public void init(FilterConfig filterConfig) {
		// do stuff when filter created
	}

	public void destroy() {
		// do stuff when filter destroyed
	}
}
&lt;/code&gt;&lt;/pre&gt;
</description>
        <pubDate>Mon, 02 Feb 2015 00:00:00 +0000</pubDate>
        <link>/2015/02/02/using-cors-with-rest/</link>
        <guid isPermaLink="true">/2015/02/02/using-cors-with-rest/</guid>
        
        <category>CORS</category>
        
        <category>Spring</category>
        
        <category>AngularJs</category>
        
        <category>Eclipse</category>
        
        <category>NetBeans</category>
        
        
      </item>
    
      <item>
        <title>Creating a page-centric site using Jekyll and GitHub Pages</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is the ‘blog aware’ static site generator powering &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. It takes &lt;a href=&quot;http://liquidmarkup.org/&quot;&gt;Liquid&lt;/a&gt; templates, static assets (like CSS and JavaScript), and &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;markdown&lt;/a&gt; documents, and outputs a site.&lt;/p&gt;

&lt;p&gt;While Jekyll excells at creating blog-centric static sites, its not so clear from the documentation how to create a basic page-centric site. &lt;a href=&quot;http://tony-waters.github.io/example-jekyll/&quot;&gt;Here&lt;/a&gt; is one I created by way of example. It contains information for visitors to a conference on ‘whatever’, including a welcome page, a page for each speaker, and a directions page (&lt;a href=&quot;https://github.com/tony-waters/example-jekyll&quot;&gt;source code&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-02-18-conference-alice.png&quot; alt=&quot;Image alt&quot; title=&quot;image title&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jekyll-folder-structure&quot;&gt;Jekyll folder structure&lt;/h3&gt;
&lt;p&gt;Creating a new Jekyll site usually involves running &lt;code&gt;jekyll new my-site-name&lt;/code&gt; to creats a ready made structure with some sample data that can be immediately viewed using &lt;code&gt;jekyll serve&lt;/code&gt;. To keep it as clean as possible, I’ve created a minimal structure by hand instead. At minimum, Jeckyll needs a &lt;code&gt;_config.yml&lt;/code&gt; file and a page to serve. I’ve added folers for &lt;code&gt;_layouts&lt;/code&gt; and &lt;code&gt;_includes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here is the final folder structure containing all the files needed to create the site. Notice there is no mention of posts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-02-18-folders.png&quot; alt=&quot;Image alt&quot; title=&quot;image title&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-markdown&quot;&gt;The markdown&lt;/h3&gt;

&lt;p&gt;Each page on the site is generated from a markdown document (with the &lt;code&gt;.md&lt;/code&gt; suffix). Adding a new page to the site simply involves dropping a new markdown document into the site root and regenerating. Here is the markdown document for the welcome page &lt;code&gt;index.md&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Welcome
layout: default
menu-order: 10
---
#Welcome to the Conference
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi ut nulla eu massa 
imperdiet tincidunt. Donec luctus placerat tellus, nec consequat magna tempus 
ultricies. Proin blandit dictum felis, non vehicula sapien scelerisque et. Aliquam 
viverra elit molestie aliquet commodo. Sed pulvinar tellus augue, ut suscipit 
turpis sagittis a. Praesent dictum nisi neque, et eleifend lectus venenatis ac.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main part of the document is the content itself, specified in markdown. At the top of the document we have some meta-data in the form of YAML Front Matter stating each pages &lt;code&gt;title&lt;/code&gt;, which &lt;code&gt;layout&lt;/code&gt; template to use, and a custom &lt;code&gt;menu-order&lt;/code&gt; variable which we use to sort the navigation. I’ve decided to go up in 10s because it gives us room to add new pages later without having to edit existing markdown documents.&lt;/p&gt;

&lt;h3 id=&quot;the-template&quot;&gt;The template&lt;/h3&gt;
&lt;p&gt;Because this page has specified &lt;code&gt;layout: default&lt;/code&gt; Jekyll knows to look in the &lt;code&gt;_layouts&lt;/code&gt; folder for &lt;code&gt;default.html&lt;/code&gt; and create the page using this template. &lt;code&gt;default.html&lt;/code&gt; is used by all of our pages. It defines the page structure using HTML, Liquid includes, and some CSS classes to make it a little prettier:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
    	{% include head.html %}
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;!--header--&amp;gt;
        &amp;lt;div class=&quot;container intro-header&quot;&amp;gt;
            &amp;lt;div class=&quot;row&quot;&amp;gt;
                &amp;lt;div class=&quot;col-lg-12&quot;&amp;gt;
                    &amp;lt;div class=&quot;intro-message&quot;&amp;gt;
                        &amp;lt;h1&amp;gt;Welcome to the Conference&amp;lt;/h1&amp;gt;
                        &amp;lt;h3&amp;gt;Here is all the info you need&amp;lt;/h3&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;!--main--&amp;gt;
        &amp;lt;div class=&quot;container page&quot;&amp;gt;
            &amp;lt;div class=&quot;row&quot;&amp;gt;
                &amp;lt;div class=&quot;col-md-3 sidebar&quot;&amp;gt;
                    {% include sidebar.html %}
                &amp;lt;/div&amp;gt;
                &amp;lt;div class=&quot;col-md-9 content&quot;&amp;gt;
                     {{ content }}
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;!--footer--&amp;gt;
        &amp;lt;div class=&quot;container footer&quot;&amp;gt;
            &amp;lt;div class=&quot;row&quot;&amp;gt;
                &amp;lt;div class=&quot;col-md-12 sidebar&quot;&amp;gt;
                    {% include footer.html %}
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;the-dynamic-page-menu&quot;&gt;The dynamic page menu&lt;/h3&gt;
&lt;p&gt;To keep this modular I’ve included the header, footer and sidebar in separate html files in the &lt;code&gt;_includes&lt;/code&gt; folder. Jekyll knows to look there for any included files. &lt;code&gt;sidebar.html&lt;/code&gt; contains the dynamically generated menu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;sidebar&quot; id=&quot;sidebar&quot;&amp;gt;
    &amp;lt;ul class=&quot;list-unstyled&quot;&amp;gt;
     {% assign pages = site.pages | sort:'menu-order' %}
      {% for p in pages %}
      	{% if p.menu-order %}
            &amp;lt;li&amp;gt;
              &amp;lt;a  {% if p.url == page.url %}class='active'{% endif %} href='{{ p.url }}'&amp;gt;
                {{ p.title }}
              &amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
         {% endif %}
       {% endfor %}
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jekyll contains a list of all the pages it knows about in a &lt;code&gt;site.pages&lt;/code&gt; variable. We loop through this displaying a &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; for each page with a &lt;code&gt;menu-order&lt;/code&gt;. Whenever a new markdown document is added containing a &lt;code&gt;menu-order&lt;/code&gt; value in its YAML Front Matter, it will be included in the site menu.&lt;/p&gt;

&lt;p&gt;We can now add other pages to the site, remove, and edit pages via manipulation of the  markdown documents.&lt;/p&gt;

&lt;h3 id=&quot;why-this-is-good&quot;&gt;Why this is good&lt;/h3&gt;
&lt;p&gt;The benefit of this approach is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;updating the site now soley revolves around creating new markdown documents and editing existing ones. Should a speaker change, or a new speaker join, we just change the markdown documents, re-generate, and push to GitHub&lt;/li&gt;
  &lt;li&gt;there is no HTML to deal with for the document writer, just a standard format that can be picked up in minutes. Having said that, there are slightly more technical hurdles to jump in publishing the updated site compared to users of a CMS like WordPress/Joomla/Drupal &lt;/li&gt;
  &lt;li&gt;no need for a big CMS like Wordpress/Joomla/Drupal, and hence
    &lt;ul&gt;
      &lt;li&gt;no security updates&lt;/li&gt;
      &lt;li&gt;no management console&lt;/li&gt;
      &lt;li&gt;no need to implement a caching strategy (its already static!)&lt;/li&gt;
      &lt;li&gt;no usernames and passwords&lt;/li&gt;
      &lt;li&gt;the list goes on …&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Jekyll provides a simple/powerful way of generating static sites from markdown documents. The nature of markdown means that it is both secure, and easy for non-developers to use. Combined with Github Pages, its a very convenient way to get a website workflow up and running quickly and for free. &lt;/p&gt;
</description>
        <pubDate>Sun, 01 Feb 2015 00:00:00 +0000</pubDate>
        <link>/2015/02/01/jekyll-page-centric-site/</link>
        <guid isPermaLink="true">/2015/02/01/jekyll-page-centric-site/</guid>
        
        <category>Jekyll</category>
        
        <category>theme</category>
        
        <category>responsive</category>
        
        <category>blog</category>
        
        <category>template</category>
        
        
      </item>
    
  </channel>
</rss>
