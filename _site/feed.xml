<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">Home</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2015-03-08T18:49:28+00:00</updated>
<id>/</id>
<author>
  <name>Tony Waters</name>
  <uri>/</uri>
  
</author>


  

<entry>
  <title type="html"><![CDATA[Mapping DDD Value Objects using JPA - Part 2]]></title>
  <link rel="alternate" type="text/html" href="/value-objects-2/" />
  <id>/value-objects-2</id>
  <published>2015-02-10T00:00:00+00:00</published>
  <updated>2015-02-10T00:00:00+00:00</updated>
  <author>
    <name>Tony Waters</name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;blockquote&gt;
  &lt;p&gt;Tracking the identity of ENTITIES is essential, but attaching identity to other objects can hurt system performance, add analytical work, and muddle the model by making all objects look the same. (Evans 2003)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In a &lt;a href=&quot;/value-objects&quot;&gt;previous post&lt;/a&gt; I looked at the &lt;a href=&quot;http://en.wikipedia.org/wiki/Domain-driven_design&quot;&gt;Domain Driven Design&lt;/a&gt; concept of Value Objects as outlined by Eric Evans (2003). In this second post I want to show how we can persist such objects to a relational database using JPA.&lt;/p&gt;

&lt;p&gt;In this example I’m using H2 as the database and Hibernate as the JPA provider. It has also been tested with EclipseLink. &lt;a href=&quot;&quot;&gt;Source code&lt;/a&gt; is available on GitHub.&lt;/p&gt;

&lt;h3 id=&quot;mapping-a-value-object-in-jpa-using-embeddable&quot;&gt;Mapping a Value Object in JPA using @Embeddable&lt;/h3&gt;
&lt;p&gt;The JPA Specification recognises that not everything is an Entity:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An entity may use other fine-grained classes to represent entity state. Instances of these classes, unlike entity instances, do not have persistent identity of their own. Instead, they exist only as part of the state of the entity to which they belong (JSR 338 - Java Persistence API 2.1)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;These &lt;code&gt;Embeddable&lt;/code&gt; classes provides a convenient mapping for Value Objects. Here are the pertinent parts of the &lt;code&gt;Month&lt;/code&gt; Value Object from &lt;a href=&quot;/value-objects&quot;&gt;Part 1&lt;/a&gt;, annotated as a JPA &lt;code&gt;Embeddable&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Embeddable
public class Month implements Comparable&amp;lt;Month&amp;gt; {
	
	@Column(name=&quot;MONTH&quot;)
	private final String value;
	
	@SuppressWarnings(&quot;unused&quot;)
	private Month() {
		this.value = null;
	}

	public Month(String value) {
		if(!isValid(value)) {
			throw new DomainException(&quot;Not a valid month &quot; + value);
		}
		this.value = value;
	}

	// ... code omitted for brevity ...
} 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In line with the JPA Specification, we provide a no-argument constructor. Consequently we must also provide a value for any &lt;code&gt;final&lt;/code&gt; fields within this constructor. To prevent instantiation of this class without passing in a &lt;code&gt;value&lt;/code&gt; we make this constructor private, and add a &lt;code&gt;@SuppressWarnings&lt;/code&gt; annotation to remove the ensuing ‘never used locally’ warning.&lt;/p&gt;

&lt;p&gt;This is an example of JPA making demands upon how we construct our domain classes. It is in direct opposition to DDD which encourages us to only include what is required for the domain. To use Value Objects in JPA some compramises may have to be made.&lt;/p&gt;

&lt;p&gt;To see &lt;code&gt;Month&lt;/code&gt; in action we need to include it in an Entity:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Entity
@Table(name=&quot;FOO&quot;)
public class Foo {
	
	@Id
	@GeneratedValue(strategy=GenerationType.IDENTITY)
	@Column(name=&quot;ID&quot;)
	private Long entityId;
	
	@Version
	@Column(name=&quot;VERSION&quot;)
	private Integer version;

	@Column(name=&quot;BAA&quot;)
	private String baa;
	
	@Embedded
	private Month birthMonth;
	
	// ... code omitted for brevity ...
	
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When we launch the application Hibernate issues the following SQL to create the table:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table FOO (
	ID bigint generated by default as identity,
	BAA varchar(255),
	MONTH varchar(6),
	VERSION integer,
	primary key (ID)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;overiding-jpa-attributes-in-value-objects&quot;&gt;Overiding JPA Attributes in Value Objects&lt;/h3&gt;
&lt;p&gt;If we wanted to use the same Value Object in two places in the same Entity, this would give us two columns with the same name, which would be invalid. Neither would this work if we wanted a different column name depending on the Entity the Value Object in embedded into. &lt;/p&gt;

&lt;p&gt;JPA provides the &lt;code&gt;@AttributesOverride&lt;/code&gt; annotation for this purpose. We use it to say “I want to use this particular Value Object, but I want it to have a different column name in the database table”. We could either remove it, or leave it in as a default value when no other &lt;code&gt;@Column&lt;/code&gt; name is provided.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Embedded
@AttributeOverride(name = &quot;value&quot;, column = @Column(name = &quot;BIRTH_MONTH&quot;))
private Month birthMonth;

@Embedded
@AttributeOverride(name = &quot;value&quot;, column = @Column(name = &quot;FOO_MONTH&quot;))
private Month fooMonth;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here is the new DDL produced by Hibernate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table FOO (
	ID bigint generated by default as identity,
	BAA varchar(255),
	BIRTH_MONTH varchar(255),
	FOO_MONTH varchar(255),
	VERSION integer,
	primary key (ID)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;overiding-jpa-attributes-in-composite-value-objects&quot;&gt;Overiding JPA Attributes in Composite Value Objects&lt;/h3&gt;
&lt;p&gt;In part 1 of this post I gave an example of a &lt;code&gt;MonthRange&lt;/code&gt; as a composite Value Object. Here is what it looks like with JPA annotations:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Embeddable
public class MonthRange {

	@AttributeOverride(name = &quot;value&quot;, column = @Column(name = &quot;START_MONTH&quot;))
	private final Month start;
	
	@AttributeOverride(name = &quot;value&quot;, column = @Column(name = &quot;END_MONTH&quot;))
	private final Month end;

	@SuppressWarnings(&quot;unused&quot;)
	private MonthRange() {
		this.start = null;
		this.end = null;
	}
	
	public MonthRange(Month start, Month end) {
		if(!isValid(start, end)) {
			throw new DomainException(&quot;Not a valid month range[&quot; + start.getMonthAsString() + &quot;-&quot; + end.getMonthAsString() +&quot;]&quot;);
		}
		this.start = start;
		this.end = end;
	}
	
	// ... code omitted for brevity ...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;MonthRange&lt;/code&gt; is an &lt;code&gt;@Embeddable&lt;/code&gt; object, which is itself composed of &lt;code&gt;@Embeddedable&lt;/code&gt; objects. We could now embed the &lt;code&gt;MonthRange&lt;/code&gt; into an Entity Object. Here is how we override the column name for &lt;code&gt;Month&lt;/code&gt; from within the Entity class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Entity
@Table(name=&quot;FOO&quot;)
public class Foo {
	
	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	@Column(name=&quot;ID&quot;)
	private Long entityId;
	
	@Version
	@Column(name=&quot;VERSION&quot;)
	private Integer version;

	@Column(name=&quot;BAA&quot;)
	private String baa;
	
	@Embedded
	@AttributeOverride(name = &quot;value&quot;, column = @Column(name = &quot;BIRTH_MONTH&quot;))
	private Month birthMonth;
	
	@Embedded
	@AttributeOverride(name = &quot;value&quot;, column = @Column(name = &quot;FOO_MONTH&quot;))
	private Month fooMonth;
	
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name = &quot;start.value&quot;, column = @Column(name = &quot;CURRENT_START_MONTH&quot;)),
		@AttributeOverride(name = &quot;end.value&quot;, column = @Column(name = &quot;CURRENT_END_MONTH&quot;))
	})
	private MonthRange currentMonthRange;
	
	@Embedded
	@AttributeOverrides({
		@AttributeOverride(name = &quot;start.value&quot;, column = @Column(name = &quot;PREVIOUS_START_MONTH&quot;)),
		@AttributeOverride(name = &quot;end.value&quot;, column = @Column(name = &quot;PREVIOUS_END_MONTH&quot;))
	})
	private MonthRange previousMonthRange;
	
	public Foo() {
		super();
	}
	
	// ... code omitted for brevity ...
	
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s what it produces on Hibernate:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table FOO (
	ID bigint generated by default as identity,
	BAA varchar(255),
	BIRTH_MONTH varchar(255),
	CURRENT_END_MONTH varchar(255),
	CURRENT_START_MONTH varchar(255),
	FOO_MONTH varchar(255),
	PREVIOUS_END_MONTH varchar(255),
	PREVIOUS_START_MONTH varchar(255),
	VERSION integer,
	primary key (ID)
)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;collections-of-embeddables&quot;&gt;Collections of Embeddables&lt;/h3&gt;
&lt;blockquote&gt;
  &lt;p&gt;A persistent field or property of an entity or embeddable class may correspond to a collection of a basic type or embeddable class (JSR 338 - Java Persistence API 2.1)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;JPA allows for collections of &lt;code&gt;Embeddable&lt;/code&gt;s. This is similar to a &lt;code&gt;OneToMany&lt;/code&gt; association, needing a separate table to hold the values. Here is an example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@ElementCollection
@CollectionTable(name=&quot;FOO_MONTH&quot;, joinColumns=@JoinColumn(name=&quot;FOO_ID&quot;))
private Collection&amp;lt;Month&amp;gt; months = new ArrayList&amp;lt;Month&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here’s what Hibernate does with it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create table FOO (
	ID bigint generated by default as identity,
	BAA varchar(255),
	BIRTH_MONTH varchar(255),
	CURRENT_END_MONTH varchar(255),
	CURRENT_START_MONTH varchar(255),
	FOO_MONTH varchar(255),
	PREVIOUS_END_MONTH varchar(255),
	PREVIOUS_START_MONTH varchar(255),
	VERSION integer,
	primary key (ID)
)

create table FOOBAA_MONTH (
	FOO_ID bigint not null,
	MONTH varchar(255)
)

alter table FOOBAA_MONTH 
	add constraint FK_f3gxv3hla3nch460sx3ss6oex 
	foreign key (FOO_ID) 
	references FOO
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An important restriction on collections of &lt;code&gt;Embeddable&lt;/code&gt; classes is that:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;An embeddable class (including an embeddable class within another embeddable class) that is con-
tained within an element collection must not contain an element collection&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Which means we cannot nest a collection of &lt;code&gt;Embeddable&lt;/code&gt;s within another collection of &lt;code&gt;Embeddables&lt;/code&gt;. The reasons for this are explained here. While the restriction may seem like an ‘edge case’, I find it can sometimes force us to use an Entity in place of a Value Object.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;
&lt;p&gt;In Part 1 of this post I looked at the Domain Driven Design concept of Value Objects and outlined a way of creating such an object by following Eric Evans’ advice. In this follow-up post I have tried to show how &lt;code&gt;Embeddable&lt;/code&gt;s provide an obvious means of mapping Value Objects to a relational database when using JPA.&lt;/p&gt;

&lt;p&gt;I’ve also tried to show how producing these mappings is not always such a ‘clean’ process. Compromises have to be made between the tenents of DDD and the platform used for its implementation.&lt;/p&gt;

&lt;p&gt;Source code for the examples shown here, along with some basic ‘sanity check’ tests, are available on GitHub.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/value-objects-2/&quot;&gt;Mapping DDD Value Objects using JPA - Part 2&lt;/a&gt; was originally published by Tony Waters at &lt;a href=&quot;&quot;&gt;Home&lt;/a&gt; on February 10, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Mapping DDD Value Objects using JPA - Part 1]]></title>
  <link rel="alternate" type="text/html" href="/value-objects/" />
  <id>/value-objects</id>
  <published>2015-02-05T00:00:00+00:00</published>
  <updated>2015-02-05T00:00:00+00:00</updated>
  <author>
    <name>Tony Waters</name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;In a recent project I drew upon a number of concepts from &lt;a href=&quot;http://en.wikipedia.org/wiki/Domain-driven_design&quot;&gt;Domain Driven Design&lt;/a&gt;. Among them Value Objects, which Eric Evans says:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;represent a descriptive aspect of the domain that has no conceptual identity (Evans 2003)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In terms of creating them he offers the following advice:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;When you care only about the attributes of an element of the model, classify it as a VALUE OBJECT. Making it express the meaning of attributes it conveys and give it related functionality. Treat the VALUE OBJECT as immutable. Don’t give it any identity and avoid the design complexities necessary to maintain ENTITIES (Evans 2003)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I’d like to outline what a Value Object is in this context and show a simple approach to using them in an application that uses JPA with a relational database.&lt;/p&gt;

&lt;p&gt;By way of example I’ll use a (simplified) Value Object from my last project, &lt;code&gt;Month&lt;/code&gt; - which denotes a ‘specific month in a specific year’. It could be (and at some point was) represented by a &lt;code&gt;String&lt;/code&gt; with the format ‘YYYYmm’. I’ll try and show that representing it as a Value Object brings many advantages, including cleaner code, in-situ validation, and serving as a place to put increasing functionality as the project progresses.&lt;/p&gt;

&lt;h2 id=&quot;good-value-objects&quot;&gt;‘Good’ Value Objects&lt;/h2&gt;
&lt;p&gt;Re-jigging Evans’s quote, to make a good Value Object one must:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;make it express the meaning of its attribute(s)&lt;/li&gt;
  &lt;li&gt;treat it as immutable&lt;/li&gt;
  &lt;li&gt;don’t give it any identity&lt;/li&gt;
  &lt;li&gt;give it related functionality&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;make-it-express-the-meaning-of-its-attributes&quot;&gt;1. Make it express the meaning of its attribute(s)&lt;/h3&gt;
&lt;p&gt;The Value Object we want to create is used to represent a single attribute – a ‘month in a year’. It wraps a &lt;code&gt;String&lt;/code&gt; object that holds the month in the format ‘yyyyMM’. However, Evans seems to be steering us away from calling it something ending in &lt;code&gt;Wrapper&lt;/code&gt;, towards “expressing the meaning of the attribute it conveys”. To this end, we could choose to express this attribute in a class named something along the lines of &lt;code&gt;YearMonth&lt;/code&gt;, &lt;code&gt;MonthInYear&lt;/code&gt; or &lt;code&gt;Month&lt;/code&gt; &lt;sup&gt;&lt;a href=&quot;#notes&quot;&gt;[1]&lt;/a&gt;&lt;/sup&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Month {
	private final String value;

	public Month(String value) {
		this.value = value;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now when we work with months the code is more readable, conveying &lt;i&gt;the concept of the attribute being wrapped&lt;/i&gt;. &lt;/p&gt;

&lt;h3 id=&quot;treat-it-as-immutable&quot;&gt;2. Treat it as immutable&lt;/h3&gt;
&lt;p&gt;There are no setters in &lt;code&gt;Month&lt;/code&gt; to mutate the &lt;code&gt;value&lt;/code&gt;. And we’ve declared the field itself &lt;code&gt;final&lt;/code&gt;. This covers most usage scenarios for immutability. Of course, creating a robust immutable object in Java is &lt;a href=&quot;http://docs.oracle.com/javase/tutorial/essential/concurrency/imstrat.html&quot;&gt;a little more involved&lt;/a&gt; than we are showing here. Also, if we use reflection, nothing is immutable.&lt;/p&gt;

&lt;p&gt;The important thing is that we &lt;i&gt;treat&lt;/i&gt; it as immutable, and try to make that clear to future maintainers of the system through the design on the object:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Immutability of an attribute or object can be declared in some languages and environments and not in others. These features are helpful for communication of the design decision, but not essential. (Evans 2003)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;dont-give-it-any-identity&quot;&gt;3. Don’t give it any identity&lt;/h3&gt;
&lt;p&gt;Value Objects have no identity apart from the combination of their field values. Thus two Value Objects with the same field values can be considered as the same object from the perspective of the application. It is common, then, to see Value Objects use all of their fields in the &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; calculations. This is in opposition to an Entity where these methods will compare on some form of ID.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Month&lt;/code&gt; has no database or domain identity, so no ID in the calculations. A combination of the fields are used instead (in this case the single field &lt;code&gt;value&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Override
public int hashCode() {
	final int prime = 31;
	int result = 1;
	result = prime * result + ((value == null) ? 0 : value.hashCode());
	return result;
}

@Override
public boolean equals(Object obj) {
	if (this == obj) return true;
	if (obj == null) return false;
	if (getClass() != obj.getClass()) return false;
	Month other = (Month) obj;
	if (value == null) {
		if (other.value != null) return false;
	} else if (!value.equals(other.value)) {
		return false;
	}
	return true;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The fact that two different &lt;code&gt;Month&lt;/code&gt; objects are equal so long as their &lt;code&gt;value&lt;/code&gt; is the same should alert us to the fact this is indeed a Value Object. We should be able to exchange one Value Object for another without code that uses these objects caring.  &lt;/p&gt;

&lt;h3 id=&quot;give-it-related-functionality&quot;&gt;4. Give it related functionality&lt;/h3&gt;
&lt;p&gt;Our Value Object now becomes a magnet for any month-related functionality. We’ll start with validation. Here is the (over-simplified) validation, it uses a &lt;code&gt;static&lt;/code&gt; method for validation so that calling code can do a pre-creation validity check if it so chooses:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Month {
	private final String value;

	public Month(String value) {
		if(!isValid(value)) {
			throw new DomainValidationException(&quot;Not a valid month &quot; + value);
		}
		this.value = value;
	}

	
	public static boolean isValid(String yearMonth) {
		if(yearMonth == null || !isInteger(yearMonth) || yearMonth.length() != 6) {
			return false;
		}
		return true;
	}
	
	private static boolean isInteger(String s) {
		try {
			Integer.parseInt(s);
		} catch(NumberFormatException e) {
			return false;
		}
		return true;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;isValid()&lt;/code&gt; method is where we will put our increasing understanding of what it means for a &lt;code&gt;Month&lt;/code&gt; object to be valid. Through this process we can make it impossible to create an invalid &lt;code&gt;Month&lt;/code&gt;. And its always clear in our calling code that we’re dealing with months:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;String myMonthString = &quot;201501&quot;;
if(Month.isValid(myMonthString)) {
	new Month(myMonthString);
}

new Month(null); // throws Exception

new Month(&quot;20150&quot;); // throws Exception

new Month(&quot;abcdef&quot;); // throws Exception
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Also, whenever the need for new month-related functionality, there is an obvious place to put it. Here we implement the &lt;code&gt;Comparable&lt;/code&gt; interface to add the functionality to compare two &lt;code&gt;Month&lt;/code&gt; objects:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class Month implements Comparable&amp;lt;Month&amp;gt; {
	
	// ... code omitted for brevity ...
	
	@Override
	public int compareTo(Month other) {
		if(other == null) {
			throw new NullPointerException();
		}
		Integer thisMonth = Integer.valueOf(this.value);
		Integer otherMonth = Integer.valueOf(other.getMonthAsString());
		if(otherMonth &amp;gt; thisMonth) {
			return 1;
		} else if(otherMonth &amp;lt; thisMonth) {
			return -1;
		}
		return 0;
	}

	// ... code omitted for brevity ...
	
}	
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have followed Eric’s guidelines to identify/create a Value Object, let’s pause a moment to understand what we have gained.&lt;/p&gt;

&lt;h2 id=&quot;what-we-gain&quot;&gt;What we gain&lt;/h2&gt;
&lt;p&gt;First, because our concept of ‘month in a year’ is encapsulated in the &lt;code&gt;Month&lt;/code&gt; class, it is easily testable. If we had used a &lt;code&gt;String&lt;/code&gt; to represent it, we would undoubtedly be re-testing the responses to different month &lt;code&gt;String&lt;/code&gt;s at various layers of the application, some of which may require a container. Although some of this testing may still be necessary, repetition is greatly reduced.&lt;/p&gt;

&lt;p&gt;Second, because a &lt;code&gt;Month&lt;/code&gt; validates itself, there is less validation code elsewhere. This is really a more specific version of the previous point. But given that we no longer need to test for responses to invalid values for the month &lt;code&gt;String&lt;/code&gt; anywhere else in the application, it deserves a mention. Since we can’t construct an invalid &lt;code&gt;Month&lt;/code&gt;, there is nothing to test for.&lt;/p&gt;

&lt;p&gt;Third, code that uses the &lt;code&gt;Month&lt;/code&gt; class becomes more succinct and more readable. Non-developers are more likely to understand the logic than if we had stuck to the &lt;code&gt;String&lt;/code&gt; representation.&lt;/p&gt;

&lt;p&gt;Forth, tracking the lifecycle of an Entity has a degree of overhead and complexity associated with it, even with modern ORM frameworks. If we utilise Value Objects fully we will have a simpler, more maintainable and performant system.&lt;/p&gt;

&lt;p&gt;There’s probably more.&lt;/p&gt;

&lt;p&gt;Before concluding Part 1 of this 2-part post, its worth mentioning another (perhaps obvious) feature of Value Objects.&lt;/p&gt;

&lt;h2 id=&quot;composite-value-objects&quot;&gt;Composite Value Objects&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;A VALUE OBJECT can be an assemblage of other objects (Evans 2003)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;When you think about it, there is nothing to stop us creating Value Objects from other Value Objects.  Continuing our example with the &lt;code&gt;Month&lt;/code&gt; Value Object, imagine a scenario where we wanted to represent a range of months – like January 2001 to August 2015.&lt;/p&gt;

&lt;p&gt;We already have a &lt;code&gt;Month&lt;/code&gt; Value Object so lets re-use it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class MonthRange {

	private final Month start;
	
	private final Month end;
	
	public MonthRange(Month start, Month end) {
		if(!isValid(start, end)) {
			throw new DomainException(&quot;Not a valid month range&quot;);
		}
		this.start = start;
		this.end = end;
	}
	
	public static boolean isValid(Month start, Month end) {
		// no need to check start and end for null - its already done in Month
		if(start.compareTo(end) != 1) { 
			return false;
		}
		return true;
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;equals()&lt;/code&gt; and &lt;code&gt;hashCode()&lt;/code&gt; of this new composite Value Object holds no reference to any identity, as we expect from a Value Object, and is instead made up of the objects constituent fields (themselves Value Objects):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((end == null) ? 0 : end.hashCode());
		result = prime * result + ((start == null) ? 0 : start.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		MonthRange other = (MonthRange) obj;
		if (end == null) {
			if (other.end != null)
				return false;
		} else if (!end.equals(other.end))
			return false;
		if (start == null) {
			if (other.start != null)
				return false;
		} else if (!start.equals(other.start))
			return false;
		return true;
	} 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;Following Evans (2003) I have outlined a method of creating Value Objects, specifically:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;make it express the meaning of its attribute(s)&lt;/li&gt;
  &lt;li&gt;treat it as immutable&lt;/li&gt;
  &lt;li&gt;don’t give it any identity&lt;/li&gt;
  &lt;li&gt;give it related functionality&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you’re anything like me, at some point you will have thought “isn’t a lot of this just good design practice that applies to any class?” After all, we’re supposed to give classes meaningful names. And we’re supposed to co-locate data and the methods that relate to it within a class – that’s just encapsulation! And this is of course true. In this sense a DDD Value Object is rooted in a wider context of Java best practices.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&quot;/value-objects-2&quot;&gt;Part 2&lt;/a&gt; of this post I will look at how &lt;code&gt;Embeddable&lt;/code&gt;s provide a means to represent Value Objects in a JPA environment.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;a-namenotesanotes&quot;&gt;&lt;a name=&quot;notes&quot;&gt;&lt;/a&gt;Notes&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;The project in question was using Java 7. I think &lt;code&gt;YearMonth&lt;/code&gt; is a good name to use for this concept, but since Java 8 has &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/index.html?java/time/package-summary.html&quot;&gt;a very nice time API&lt;/a&gt; (goodbye Joda-Time!) which, among other things, provides a &lt;code&gt;YearMonth&lt;/code&gt; class, this is perhaps not so good a choice.&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;resources&quot;&gt;Resources&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://www.domaindrivendesign.org/books/evans_2003&quot;&gt;Domain-Driven Design: Tackling Complexity in the Heart of Software&lt;/a&gt; – Eric Evans seminal 2003 work on Domain Driven Design.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.infoq.com/presentations/Value-Objects-Dan-Bergh-Johnsson&quot;&gt;Power Use of Value Objects in DDD&lt;/a&gt; – A great talk from 2009 by Dan Bergh Johnsson. He works through a detailed example of using Value Objects to simplify a program’s architecture and make it more readable and testable.&lt;/p&gt;


    &lt;p&gt;&lt;a href=&quot;/value-objects/&quot;&gt;Mapping DDD Value Objects using JPA - Part 1&lt;/a&gt; was originally published by Tony Waters at &lt;a href=&quot;&quot;&gt;Home&lt;/a&gt; on February 05, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Using CORS to facilitate development of !co-located Server and Client apps]]></title>
  <link rel="alternate" type="text/html" href="/using-cors-with-rest/" />
  <id>/using-cors-with-rest</id>
  <published>2015-02-02T00:00:00+00:00</published>
  <updated>2015-02-02T00:00:00+00:00</updated>
  <author>
    <name>Tony Waters</name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;In these post-JSP days it can sometimes be convenient to develop your clent and server code completely separate, even though they may be co-located when in production. This is particularly the case when client and server portions are being worked on by different teams, but is not limited to this scenario. Separate development of client and server code can mean that the client has to make calls to a service on a different server (maybe in a different country, or just a different port on localhost), which may not be allowed because of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Same-origin_policy&quot;&gt;Same-Origin Policy&lt;/a&gt; implemented by modern browsers.&lt;/p&gt;

&lt;p&gt;I found myself in such a situation last year when I was developing a Spring REST service which was used by an AngularJs client. My IDE, Eclipse, was great when developing the server code, but when writing Angular I was bedazzled by &lt;a href=&quot;https://blogs.oracle.com/geertjan/entry/integrated_angularjs_development&quot;&gt;the great support provided in NetBeans 8&lt;/a&gt;. Consequently I found myself switching between Eclipse and NetBeans depending upon whether I was writing server or client code. No real problem there. It seemed like the best of both worlds. That is until I began to make use of Angulars Ajax caperbilities to make calls to the REST server. Though they were both running on localhost, they were using different ports. Spring REST on the predictable &lt;code&gt;8080&lt;/code&gt;,  and NetBeans on &lt;code&gt;8383&lt;/code&gt;. Which from a Same Origin Policy perspective, is not allowed.&lt;/p&gt;

&lt;p&gt;Now, there’s obviously more than one way to solve this problem. I could co-locate the client and server source and configure the different IDEs to only act on different sections of it, or perform a little source copying during the build process to make sure everything was in one place. In both of these solutions the Same Origin Policy goes away because the client and server are co-located when running, and we can forget we ever heard of it.&lt;/p&gt;

&lt;p&gt;An alternative is to expect the client and server to be co-located in the development environment(s). If we take this route, we have to tell the server to accept requests from locations other than its own using &lt;a href=&quot;http://www.w3.org/TR/cors/&quot;&gt;Cross-Origin Resource Sharing or CORS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In JEE we can do this using a &lt;code&gt;Filter&lt;/code&gt;. Add Spring to the mix and we can annotate the filter as a &lt;code&gt;@Component&lt;/code&gt; so it is included without having to do anything else. Here’s the finished class:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import java.io.IOException;

import javax.servlet.Filter;
import javax.servlet.FilterChain;
import javax.servlet.FilterConfig;
import javax.servlet.ServletException;
import javax.servlet.ServletRequest;
import javax.servlet.ServletResponse;
import javax.servlet.http.HttpServletResponse;

import org.springframework.stereotype.Component;

@Component
public class CorsFilter implements Filter {

	public void doFilter(ServletRequest req, ServletResponse res, FilterChain chain) throws IOException, ServletException {
		HttpServletResponse response = (HttpServletResponse) res;
		response.setHeader(&quot;Access-Control-Allow-Origin&quot;, &quot;*&quot;);
		response.setHeader(&quot;Access-Control-Allow-Methods&quot;, &quot;POST, GET, PUT, OPTIONS, DELETE&quot;);
		response.setHeader(&quot;Access-Control-Max-Age&quot;, &quot;3600&quot;);
		response.setHeader(&quot;Access-Control-Allow-Headers&quot;, &quot;x-http-method-override, x-requested-with, content-Type, origin, authorization, accept, client-security-token&quot;);
		chain.doFilter(req, res);
	}

	public void init(FilterConfig filterConfig) {
		// do stuff when filter created
	}

	public void destroy() {
		// do stuff when filter destroyed
	}
}
&lt;/code&gt;&lt;/pre&gt;

    &lt;p&gt;&lt;a href=&quot;/using-cors-with-rest/&quot;&gt;Using CORS to facilitate development of !co-located Server and Client apps&lt;/a&gt; was originally published by Tony Waters at &lt;a href=&quot;&quot;&gt;Home&lt;/a&gt; on February 02, 2015.&lt;/p&gt;
  </content>
</entry>


  

<entry>
  <title type="html"><![CDATA[Creating a page-centric site using Jekyll and GitHub Pages]]></title>
  <link rel="alternate" type="text/html" href="/jekyll-page-centric-site/" />
  <id>/jekyll-page-centric-site</id>
  <published>2015-02-01T00:00:00+00:00</published>
  <updated>2015-02-01T00:00:00+00:00</updated>
  <author>
    <name>Tony Waters</name>
    <uri></uri>
    
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; is the ‘blog aware’ static site generator powering GitHub Pages. It takes a bunch of &lt;a href=&quot;http://liquidmarkup.org/&quot;&gt;Liquid&lt;/a&gt; templates, static assets (like CSS and javascript), and &lt;a href=&quot;http://daringfireball.net/projects/markdown/&quot;&gt;markdown&lt;/a&gt; documents, and outputs a site.&lt;/p&gt;

&lt;p&gt;Jekyll excells at creating blog-centric static sites, yet its not so clear from the documentation how to create a basic page-centric site. &lt;a href=&quot;http://tony-waters.github.io/example-jekyll/&quot;&gt;Here&lt;/a&gt; is one I created by way of example. It contains information for visitors to a conference on ‘whatever’, including a welcome page, a page for each speaker, and a directions page.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-02-18-conference-alice.png&quot; alt=&quot;Image alt&quot; title=&quot;image title&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;jekyll-folder-structure&quot;&gt;Jekyll folder structure&lt;/h3&gt;
&lt;p&gt;Creating a new Jekyll site usually involves running &lt;code&gt;jekyll new my-site-name&lt;/code&gt; to creats a ready made structure with some sample data that can be immediately viewed using &lt;code&gt;jekyll serve&lt;/code&gt;. To keep it as clean as possible, I’ve created a minimal structure by hand instead. At minimum, Jeckyll needs a &lt;code&gt;_config.yml&lt;/code&gt; file and a page to serve. I’ve added folers for &lt;code&gt;_layouts&lt;/code&gt; and &lt;code&gt;_includes&lt;/code&gt;. Full source &lt;a href=&quot;https://github.com/tony-waters/example-jekyll&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is the final folder structure containing all the files needed to create the site. Notice there is no mention of posts.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-02-18-folders.png&quot; alt=&quot;Image alt&quot; title=&quot;image title&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;the-markdown&quot;&gt;The markdown&lt;/h3&gt;

&lt;p&gt;Each page on the site is generated from a markdown document (with the &lt;code&gt;.md&lt;/code&gt; suffix). Adding a new page to the site simply involves dropping a new markdown document into the site root and regenerating. Here is the markdown document for the welcome page &lt;code&gt;index.md&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title: Welcome
layout: default
menu-order: 10
---
#Welcome to the Conference
Lorem ipsum dolor sit amet, consectetur adipiscing elit. Morbi ut nulla eu massa 
imperdiet tincidunt. Donec luctus placerat tellus, nec consequat magna tempus 
ultricies. Proin blandit dictum felis, non vehicula sapien scelerisque et. Aliquam 
viverra elit molestie aliquet commodo. Sed pulvinar tellus augue, ut suscipit 
turpis sagittis a. Praesent dictum nisi neque, et eleifend lectus venenatis ac.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The main part of the document is the content itself, specified in markdown. At the top of the document we have some meta-data in the form of YAML Front Matter stating each pages &lt;code&gt;title&lt;/code&gt;, which &lt;code&gt;layout&lt;/code&gt; template to use, and a custom &lt;code&gt;menu-order&lt;/code&gt; variable which we use to sort the navigation. I’ve decided to go up in 10s because it gives us room to add new pages later without having to edit existing markdown documents.&lt;/p&gt;

&lt;h3 id=&quot;the-template&quot;&gt;The template&lt;/h3&gt;
&lt;p&gt;Because this page has specified &lt;code&gt;layout: default&lt;/code&gt; Jekyll knows to look in the &lt;code&gt;_layouts&lt;/code&gt; folder for &lt;code&gt;default.html&lt;/code&gt; and create the page using this template. &lt;code&gt;default.html&lt;/code&gt; is used by all of our pages. It defines the page structure using HTML, Liquid includes, and some CSS classes to make it a little prettier:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
    	{% include head.html %}
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;!--header--&amp;gt;
        &amp;lt;div class=&quot;container intro-header&quot;&amp;gt;
            &amp;lt;div class=&quot;row&quot;&amp;gt;
                &amp;lt;div class=&quot;col-lg-12&quot;&amp;gt;
                    &amp;lt;div class=&quot;intro-message&quot;&amp;gt;
                        &amp;lt;h1&amp;gt;Welcome to the Conference&amp;lt;/h1&amp;gt;
                        &amp;lt;h3&amp;gt;Here is all the info you need&amp;lt;/h3&amp;gt;
                    &amp;lt;/div&amp;gt;
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;!--main--&amp;gt;
        &amp;lt;div class=&quot;container page&quot;&amp;gt;
            &amp;lt;div class=&quot;row&quot;&amp;gt;
                &amp;lt;div class=&quot;col-md-3 sidebar&quot;&amp;gt;
                    {% include sidebar.html %}
                &amp;lt;/div&amp;gt;
                &amp;lt;div class=&quot;col-md-9 content&quot;&amp;gt;
                     {{ content }}
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

        &amp;lt;!--footer--&amp;gt;
        &amp;lt;div class=&quot;container footer&quot;&amp;gt;
            &amp;lt;div class=&quot;row&quot;&amp;gt;
                &amp;lt;div class=&quot;col-md-12 sidebar&quot;&amp;gt;
                    {% include footer.html %}
                &amp;lt;/div&amp;gt;
            &amp;lt;/div&amp;gt;
        &amp;lt;/div&amp;gt;

    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;the-dynamic-page-menu&quot;&gt;The dynamic page menu&lt;/h3&gt;
&lt;p&gt;To keep this modular I’ve included the header, footer and sidebar in separate html files in the &lt;code&gt;_includes&lt;/code&gt; folder. Jekyll knows to look there for any included files. &lt;code&gt;sidebar.html&lt;/code&gt; contains the dynamically generated menu:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;div class=&quot;sidebar&quot; id=&quot;sidebar&quot;&amp;gt;
    &amp;lt;ul class=&quot;list-unstyled&quot;&amp;gt;
     {% assign pages = site.pages | sort:'menu-order' %}
      {% for p in pages %}
      	{% if p.menu-order %}
            &amp;lt;li&amp;gt;
              &amp;lt;a  {% if p.url == page.url %}class='active'{% endif %} href='{{ p.url }}'&amp;gt;
                {{ p.title }}
              &amp;lt;/a&amp;gt;
            &amp;lt;/li&amp;gt;
         {% endif %}
       {% endfor %}
    &amp;lt;/ul&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Jekyll contains a list of all the pages it knows about in a &lt;code&gt;site.pages&lt;/code&gt; variable. We loop through this displaying a &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; for each page with a &lt;code&gt;menu-order&lt;/code&gt;. Whenever a new markdown document is added containing a &lt;code&gt;menu-order&lt;/code&gt; value in its YAML Front Matter, it will be included in the site menu.&lt;/p&gt;

&lt;p&gt;We can now add other pages to the site, remove, and edit pages via manipulation of the  markdown documents.&lt;/p&gt;

&lt;h3 id=&quot;why-this-is-good&quot;&gt;Why this is good&lt;/h3&gt;
&lt;p&gt;The benefit of this approach is:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;updating the site now soley revolves around creating new markdown documents and editing existing ones. Should a speaker change, or a new speaker join, we just change the markdown documents, re-generate, and push to GitHub&lt;/li&gt;
  &lt;li&gt;there is no HTML to deal with for the document writer, just a standard format that can be picked up in minutes. Having said that, there are slightly more technical hurdles to jump in publishing the updated site compared to users of a CMS like WordPress/Joomla/Drupal &lt;/li&gt;
  &lt;li&gt;no need for a big CMS like Wordpress/Joomla/Drupal, and hence
    &lt;ul&gt;
      &lt;li&gt;no security updates&lt;/li&gt;
      &lt;li&gt;no management console&lt;/li&gt;
      &lt;li&gt;no need to implement a caching strategy (its already static!)&lt;/li&gt;
      &lt;li&gt;no usernames and passwords&lt;/li&gt;
      &lt;li&gt;the list goes on …&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;summary&quot;&gt;Summary&lt;/h3&gt;
&lt;p&gt;Jekyll provides a simple/powerful way of generating static sites from markdown documents. The nature of markdown means that it is both secure, and easy for non-developers to use. Combined with Github Pages, its a very convenient way to get a website workflow up and running quickly and for free. &lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/jekyll-page-centric-site/&quot;&gt;Creating a page-centric site using Jekyll and GitHub Pages&lt;/a&gt; was originally published by Tony Waters at &lt;a href=&quot;&quot;&gt;Home&lt;/a&gt; on February 01, 2015.&lt;/p&gt;
  </content>
</entry>

</feed>
